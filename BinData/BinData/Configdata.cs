// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Configdata {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_ZoneData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ZoneData, global::ZoneData.Builder> internal__static_ZoneData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ZoneConfig__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ZoneConfig, global::ZoneConfig.Builder> internal__static_ZoneConfig__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SkillData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SkillData, global::SkillData.Builder> internal__static_SkillData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SkillConfig__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SkillConfig, global::SkillConfig.Builder> internal__static_SkillConfig__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ScenceConfigData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ScenceConfigData, global::ScenceConfigData.Builder> internal__static_ScenceConfigData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ScenceConfig__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ScenceConfig, global::ScenceConfig.Builder> internal__static_ScenceConfig__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MonstertableData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MonstertableData, global::MonstertableData.Builder> internal__static_MonstertableData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MonstertableConfig__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MonstertableConfig, global::MonstertableConfig.Builder> internal__static_MonstertableConfig__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MonsterAiData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MonsterAiData, global::MonsterAiData.Builder> internal__static_MonsterAiData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MonsterAiConfig__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MonsterAiConfig, global::MonsterAiConfig.Builder> internal__static_MonsterAiConfig__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MonsterData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MonsterData, global::MonsterData.Builder> internal__static_MonsterData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MonsterConfig__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MonsterConfig, global::MonsterConfig.Builder> internal__static_MonsterConfig__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_DropData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DropData, global::DropData.Builder> internal__static_DropData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_DropConfig__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DropConfig, global::DropConfig.Builder> internal__static_DropConfig__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CharacterData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CharacterData, global::CharacterData.Builder> internal__static_CharacterData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CharacterConfig__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CharacterConfig, global::CharacterConfig.Builder> internal__static_CharacterConfig__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_BufferData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::BufferData, global::BufferData.Builder> internal__static_BufferData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_BufferConfig__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::BufferConfig, global::BufferConfig.Builder> internal__static_BufferConfig__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Configdata() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        "Chpwcm90b19kZWYvY29uZmlnZGF0YS5wcm90byKjAQoIWm9uZURhdGESCgoC" + 
        "aWQYASACKBESDwoHcHJlem9uZRgCIAIoERILCgNleHAYAyACKBESDAoEZ29s" + 
        "ZBgEIAIoERIMCgR0eXBlGAUgAigREg4KBmRyb3BpZBgGIAIoERIMCgR0aW1l" + 
        "GAcgAigREg8KB21hcHZpZXcYCCACKBESFAoMbW9uc3RlcnRhYmxlGAkgAygR" + 
        "EgwKBGRlc2MYCiACKAwiJQoKWm9uZUNvbmZpZxIXCgR6b25lGAEgAygLMgku" + 
        "Wm9uZURhdGEiiwIKCVNraWxsRGF0YRIKCgJpZBgBIAIoERIMCgR0eXBlGAIg" + 
        "AigREhAKCGhpdFZhbHVlGAMgAigREg0KBXJhbmdlGAQgAigREhAKCGJ1bGxl" + 
        "dElkGAUgAigMEhIKCmJ1bGxldFR5cGUYBiACKBESDwoHZ3VuVmlldxgHIAIo" + 
        "ERISCgpzaG9vdFNwZWVkGAggAigREhMKC2J1bGxldFNwZWVkGAkgAigREhEK" + 
        "CWhpdEVmZmVjdBgKIAIoDBITCgtzZWxmQnVmZmVyMRgLIAIoERITCgtzZWxm" + 
        "QnVmZmVyMhgMIAIoERISCgpoaXRCdWZmZXIxGA0gAigREhIKCmhpdEJ1ZmZl" + 
        "cjIYDiACKBEiKAoLU2tpbGxDb25maWcSGQoFc2tpbGwYASADKAsyCi5Ta2ls" + 
        "bERhdGEiSAoQU2NlbmNlQ29uZmlnRGF0YRIKCgJpZBgBIAIoERIMCgRuYW1l" + 
        "GAIgAigMEgwKBHZpZXcYAyACKAwSDAoEZGVzYxgEIAIoDCI4CgxTY2VuY2VD" + 
        "b25maWcSKAoNc2NlbmNlQ29uZmlncxgBIAMoCzIRLlNjZW5jZUNvbmZpZ0Rh" + 
        "dGEiXQoQTW9uc3RlcnRhYmxlRGF0YRIKCgJpZBgBIAIoERIRCgltb25zdGVy" + 
        "SWQYAiADKBESDgoGZHJvcGlkGAMgAigREgwKBHJhdGUYBCACKBESDAoEZGVz" + 
        "YxgFIAIoDCI9ChJNb25zdGVydGFibGVDb25maWcSJwoMbW9uc3RlcnRhYmxl" + 
        "GAEgAygLMhEuTW9uc3RlcnRhYmxlRGF0YSKJAQoNTW9uc3RlckFpRGF0YRIK" + 
        "CgJpZBgBIAIoERIMCgR0eXBlGAIgAigREg4KBnBvaW50MRgDIAIoERIOCgZw" + 
        "b2ludDIYBCACKBESDgoGcG9pbnQzGAUgAigREg4KBnBvaW50NBgGIAIoERIO" + 
        "CgZwb2ludDUYByACKBESDgoGcG9pbnQ2GAggAigRIjQKD01vbnN0ZXJBaUNv" + 
        "bmZpZxIhCgltb25zdGVyQWkYASADKAsyDi5Nb25zdGVyQWlEYXRhIr4BCgtN" + 
        "b25zdGVyRGF0YRIKCgJpZBgBIAIoERIMCgR0eXBlGAIgAigREgoKAmhwGAMg" + 
        "AigREg0KBXNwZWVkGAQgAigREgwKBHZpZXcYBSACKAwSDAoEYWlJZBgGIAIo" + 
        "ERIOCgZza2lsbDEYByACKBESDgoGc2tpbGwyGAggAigREg4KBnNraWxsMxgJ" + 
        "IAIoERIOCgZza2lsbDQYCiACKBESDgoGc2tpbGw1GAsgAigREg4KBnNraWxs" + 
        "NhgMIAIoESIuCg1Nb25zdGVyQ29uZmlnEh0KB21vbnN0ZXIYASADKAsyDC5N" + 
        "b25zdGVyRGF0YSJjCghEcm9wRGF0YRIOCgZncm9wSWQYASACKBESDAoEdHlw" + 
        "ZRgCIAIoERIOCgZpdGVtaWQYAyACKBESDAoEcmF0ZRgEIAIoERINCgVjb3Vu" + 
        "dBgFIAIoERIMCgRkZXNjGAYgAigMIiUKCkRyb3BDb25maWcSFwoEZHJvcBgB" + 
        "IAMoCzIJLkRyb3BEYXRhImsKDUNoYXJhY3RlckRhdGESDQoFbGV2ZWwYASAC" + 
        "KBESCwoDZXhwGAIgAigREg4KBmF0dGFjaxgDIAIoERIKCgJocBgEIAIoERIN" + 
        "CgVzcGVlZBgFIAIoERITCgthdHRhY2tzcGVlZBgGIAIoESI0Cg9DaGFyYWN0" + 
        "ZXJDb25maWcSIQoJY2hhcmFjdGVyGAEgAygLMg4uQ2hhcmFjdGVyRGF0YSJK" + 
        "CgpCdWZmZXJEYXRhEgoKAmlkGAEgAigREgwKBHR5cGUYAiACKBESDQoFdmFs" + 
        "dWUYAyACKBESEwoLdGltZV9sZW5ndGgYBCACKBEiKwoMQnVmZmVyQ29uZmln" + 
        "EhsKBmJ1ZmZlchgBIAMoCzILLkJ1ZmZlckRhdGE=");
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_ZoneData__Descriptor = Descriptor.MessageTypes[0];
      internal__static_ZoneData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ZoneData, global::ZoneData.Builder>(internal__static_ZoneData__Descriptor,
              new string[] { "Id", "Prezone", "Exp", "Gold", "Type", "Dropid", "Time", "Mapview", "Monstertable", "Desc", });
      internal__static_ZoneConfig__Descriptor = Descriptor.MessageTypes[1];
      internal__static_ZoneConfig__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ZoneConfig, global::ZoneConfig.Builder>(internal__static_ZoneConfig__Descriptor,
              new string[] { "Zone", });
      internal__static_SkillData__Descriptor = Descriptor.MessageTypes[2];
      internal__static_SkillData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SkillData, global::SkillData.Builder>(internal__static_SkillData__Descriptor,
              new string[] { "Id", "Type", "HitValue", "Range", "BulletId", "BulletType", "GunView", "ShootSpeed", "BulletSpeed", "HitEffect", "SelfBuffer1", "SelfBuffer2", "HitBuffer1", "HitBuffer2", });
      internal__static_SkillConfig__Descriptor = Descriptor.MessageTypes[3];
      internal__static_SkillConfig__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SkillConfig, global::SkillConfig.Builder>(internal__static_SkillConfig__Descriptor,
              new string[] { "Skill", });
      internal__static_ScenceConfigData__Descriptor = Descriptor.MessageTypes[4];
      internal__static_ScenceConfigData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ScenceConfigData, global::ScenceConfigData.Builder>(internal__static_ScenceConfigData__Descriptor,
              new string[] { "Id", "Name", "View", "Desc", });
      internal__static_ScenceConfig__Descriptor = Descriptor.MessageTypes[5];
      internal__static_ScenceConfig__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ScenceConfig, global::ScenceConfig.Builder>(internal__static_ScenceConfig__Descriptor,
              new string[] { "ScenceConfigs", });
      internal__static_MonstertableData__Descriptor = Descriptor.MessageTypes[6];
      internal__static_MonstertableData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MonstertableData, global::MonstertableData.Builder>(internal__static_MonstertableData__Descriptor,
              new string[] { "Id", "MonsterId", "Dropid", "Rate", "Desc", });
      internal__static_MonstertableConfig__Descriptor = Descriptor.MessageTypes[7];
      internal__static_MonstertableConfig__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MonstertableConfig, global::MonstertableConfig.Builder>(internal__static_MonstertableConfig__Descriptor,
              new string[] { "Monstertable", });
      internal__static_MonsterAiData__Descriptor = Descriptor.MessageTypes[8];
      internal__static_MonsterAiData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MonsterAiData, global::MonsterAiData.Builder>(internal__static_MonsterAiData__Descriptor,
              new string[] { "Id", "Type", "Point1", "Point2", "Point3", "Point4", "Point5", "Point6", });
      internal__static_MonsterAiConfig__Descriptor = Descriptor.MessageTypes[9];
      internal__static_MonsterAiConfig__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MonsterAiConfig, global::MonsterAiConfig.Builder>(internal__static_MonsterAiConfig__Descriptor,
              new string[] { "MonsterAi", });
      internal__static_MonsterData__Descriptor = Descriptor.MessageTypes[10];
      internal__static_MonsterData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MonsterData, global::MonsterData.Builder>(internal__static_MonsterData__Descriptor,
              new string[] { "Id", "Type", "Hp", "Speed", "View", "AiId", "Skill1", "Skill2", "Skill3", "Skill4", "Skill5", "Skill6", });
      internal__static_MonsterConfig__Descriptor = Descriptor.MessageTypes[11];
      internal__static_MonsterConfig__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MonsterConfig, global::MonsterConfig.Builder>(internal__static_MonsterConfig__Descriptor,
              new string[] { "Monster", });
      internal__static_DropData__Descriptor = Descriptor.MessageTypes[12];
      internal__static_DropData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DropData, global::DropData.Builder>(internal__static_DropData__Descriptor,
              new string[] { "GropId", "Type", "Itemid", "Rate", "Count", "Desc", });
      internal__static_DropConfig__Descriptor = Descriptor.MessageTypes[13];
      internal__static_DropConfig__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DropConfig, global::DropConfig.Builder>(internal__static_DropConfig__Descriptor,
              new string[] { "Drop", });
      internal__static_CharacterData__Descriptor = Descriptor.MessageTypes[14];
      internal__static_CharacterData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CharacterData, global::CharacterData.Builder>(internal__static_CharacterData__Descriptor,
              new string[] { "Level", "Exp", "Attack", "Hp", "Speed", "Attackspeed", });
      internal__static_CharacterConfig__Descriptor = Descriptor.MessageTypes[15];
      internal__static_CharacterConfig__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CharacterConfig, global::CharacterConfig.Builder>(internal__static_CharacterConfig__Descriptor,
              new string[] { "Character", });
      internal__static_BufferData__Descriptor = Descriptor.MessageTypes[16];
      internal__static_BufferData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::BufferData, global::BufferData.Builder>(internal__static_BufferData__Descriptor,
              new string[] { "Id", "Type", "Value", "TimeLength", });
      internal__static_BufferConfig__Descriptor = Descriptor.MessageTypes[17];
      internal__static_BufferConfig__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::BufferConfig, global::BufferConfig.Builder>(internal__static_BufferConfig__Descriptor,
              new string[] { "Buffer", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ZoneData : pb::GeneratedMessage<ZoneData, ZoneData.Builder> {
  private ZoneData() { }
  private static readonly ZoneData defaultInstance = new ZoneData().MakeReadOnly();
  private static readonly string[] _zoneDataFieldNames = new string[] { "desc", "dropid", "exp", "gold", "id", "mapview", "monstertable", "prezone", "time", "type" };
  private static readonly uint[] _zoneDataFieldTags = new uint[] { 82, 48, 24, 32, 8, 64, 72, 16, 56, 40 };
  public static ZoneData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ZoneData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ZoneData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_ZoneData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ZoneData, ZoneData.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_ZoneData__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public const int PrezoneFieldNumber = 2;
  private bool hasPrezone;
  private int prezone_;
  public bool HasPrezone {
    get { return hasPrezone; }
  }
  public int Prezone {
    get { return prezone_; }
  }
  
  public const int ExpFieldNumber = 3;
  private bool hasExp;
  private int exp_;
  public bool HasExp {
    get { return hasExp; }
  }
  public int Exp {
    get { return exp_; }
  }
  
  public const int GoldFieldNumber = 4;
  private bool hasGold;
  private int gold_;
  public bool HasGold {
    get { return hasGold; }
  }
  public int Gold {
    get { return gold_; }
  }
  
  public const int TypeFieldNumber = 5;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int DropidFieldNumber = 6;
  private bool hasDropid;
  private int dropid_;
  public bool HasDropid {
    get { return hasDropid; }
  }
  public int Dropid {
    get { return dropid_; }
  }
  
  public const int TimeFieldNumber = 7;
  private bool hasTime;
  private int time_;
  public bool HasTime {
    get { return hasTime; }
  }
  public int Time {
    get { return time_; }
  }
  
  public const int MapviewFieldNumber = 8;
  private bool hasMapview;
  private int mapview_;
  public bool HasMapview {
    get { return hasMapview; }
  }
  public int Mapview {
    get { return mapview_; }
  }
  
  public const int MonstertableFieldNumber = 9;
  private pbc::PopsicleList<int> monstertable_ = new pbc::PopsicleList<int>();
  public scg::IList<int> MonstertableList {
    get { return pbc::Lists.AsReadOnly(monstertable_); }
  }
  public int MonstertableCount {
    get { return monstertable_.Count; }
  }
  public int GetMonstertable(int index) {
    return monstertable_[index];
  }
  
  public const int DescFieldNumber = 10;
  private bool hasDesc;
  private pb::ByteString desc_ = pb::ByteString.Empty;
  public bool HasDesc {
    get { return hasDesc; }
  }
  public pb::ByteString Desc {
    get { return desc_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasPrezone) return false;
      if (!hasExp) return false;
      if (!hasGold) return false;
      if (!hasType) return false;
      if (!hasDropid) return false;
      if (!hasTime) return false;
      if (!hasMapview) return false;
      if (!hasDesc) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _zoneDataFieldNames;
    if (hasId) {
      output.WriteSInt32(1, field_names[4], Id);
    }
    if (hasPrezone) {
      output.WriteSInt32(2, field_names[7], Prezone);
    }
    if (hasExp) {
      output.WriteSInt32(3, field_names[2], Exp);
    }
    if (hasGold) {
      output.WriteSInt32(4, field_names[3], Gold);
    }
    if (hasType) {
      output.WriteSInt32(5, field_names[9], Type);
    }
    if (hasDropid) {
      output.WriteSInt32(6, field_names[1], Dropid);
    }
    if (hasTime) {
      output.WriteSInt32(7, field_names[8], Time);
    }
    if (hasMapview) {
      output.WriteSInt32(8, field_names[5], Mapview);
    }
    if (monstertable_.Count > 0) {
      output.WriteSInt32Array(9, field_names[6], monstertable_);
    }
    if (hasDesc) {
      output.WriteBytes(10, field_names[0], Desc);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
      }
      if (hasPrezone) {
        size += pb::CodedOutputStream.ComputeSInt32Size(2, Prezone);
      }
      if (hasExp) {
        size += pb::CodedOutputStream.ComputeSInt32Size(3, Exp);
      }
      if (hasGold) {
        size += pb::CodedOutputStream.ComputeSInt32Size(4, Gold);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeSInt32Size(5, Type);
      }
      if (hasDropid) {
        size += pb::CodedOutputStream.ComputeSInt32Size(6, Dropid);
      }
      if (hasTime) {
        size += pb::CodedOutputStream.ComputeSInt32Size(7, Time);
      }
      if (hasMapview) {
        size += pb::CodedOutputStream.ComputeSInt32Size(8, Mapview);
      }
      {
        int dataSize = 0;
        foreach (int element in MonstertableList) {
          dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * monstertable_.Count;
      }
      if (hasDesc) {
        size += pb::CodedOutputStream.ComputeBytesSize(10, Desc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ZoneData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ZoneData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ZoneData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ZoneData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ZoneData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ZoneData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ZoneData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ZoneData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ZoneData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ZoneData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ZoneData MakeReadOnly() {
    monstertable_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ZoneData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ZoneData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ZoneData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ZoneData result;
    
    private ZoneData PrepareBuilder() {
      if (resultIsReadOnly) {
        ZoneData original = result;
        result = new ZoneData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ZoneData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ZoneData.Descriptor; }
    }
    
    public override ZoneData DefaultInstanceForType {
      get { return global::ZoneData.DefaultInstance; }
    }
    
    public override ZoneData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ZoneData) {
        return MergeFrom((ZoneData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ZoneData other) {
      if (other == global::ZoneData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasPrezone) {
        Prezone = other.Prezone;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasGold) {
        Gold = other.Gold;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasDropid) {
        Dropid = other.Dropid;
      }
      if (other.HasTime) {
        Time = other.Time;
      }
      if (other.HasMapview) {
        Mapview = other.Mapview;
      }
      if (other.monstertable_.Count != 0) {
        result.monstertable_.Add(other.monstertable_);
      }
      if (other.HasDesc) {
        Desc = other.Desc;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_zoneDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _zoneDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadSInt32(ref result.id_);
            break;
          }
          case 16: {
            result.hasPrezone = input.ReadSInt32(ref result.prezone_);
            break;
          }
          case 24: {
            result.hasExp = input.ReadSInt32(ref result.exp_);
            break;
          }
          case 32: {
            result.hasGold = input.ReadSInt32(ref result.gold_);
            break;
          }
          case 40: {
            result.hasType = input.ReadSInt32(ref result.type_);
            break;
          }
          case 48: {
            result.hasDropid = input.ReadSInt32(ref result.dropid_);
            break;
          }
          case 56: {
            result.hasTime = input.ReadSInt32(ref result.time_);
            break;
          }
          case 64: {
            result.hasMapview = input.ReadSInt32(ref result.mapview_);
            break;
          }
          case 74:
          case 72: {
            input.ReadSInt32Array(tag, field_name, result.monstertable_);
            break;
          }
          case 82: {
            result.hasDesc = input.ReadBytes(ref result.desc_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasPrezone {
      get { return result.hasPrezone; }
    }
    public int Prezone {
      get { return result.Prezone; }
      set { SetPrezone(value); }
    }
    public Builder SetPrezone(int value) {
      PrepareBuilder();
      result.hasPrezone = true;
      result.prezone_ = value;
      return this;
    }
    public Builder ClearPrezone() {
      PrepareBuilder();
      result.hasPrezone = false;
      result.prezone_ = 0;
      return this;
    }
    
    public bool HasExp {
      get { return result.hasExp; }
    }
    public int Exp {
      get { return result.Exp; }
      set { SetExp(value); }
    }
    public Builder SetExp(int value) {
      PrepareBuilder();
      result.hasExp = true;
      result.exp_ = value;
      return this;
    }
    public Builder ClearExp() {
      PrepareBuilder();
      result.hasExp = false;
      result.exp_ = 0;
      return this;
    }
    
    public bool HasGold {
      get { return result.hasGold; }
    }
    public int Gold {
      get { return result.Gold; }
      set { SetGold(value); }
    }
    public Builder SetGold(int value) {
      PrepareBuilder();
      result.hasGold = true;
      result.gold_ = value;
      return this;
    }
    public Builder ClearGold() {
      PrepareBuilder();
      result.hasGold = false;
      result.gold_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasDropid {
      get { return result.hasDropid; }
    }
    public int Dropid {
      get { return result.Dropid; }
      set { SetDropid(value); }
    }
    public Builder SetDropid(int value) {
      PrepareBuilder();
      result.hasDropid = true;
      result.dropid_ = value;
      return this;
    }
    public Builder ClearDropid() {
      PrepareBuilder();
      result.hasDropid = false;
      result.dropid_ = 0;
      return this;
    }
    
    public bool HasTime {
      get { return result.hasTime; }
    }
    public int Time {
      get { return result.Time; }
      set { SetTime(value); }
    }
    public Builder SetTime(int value) {
      PrepareBuilder();
      result.hasTime = true;
      result.time_ = value;
      return this;
    }
    public Builder ClearTime() {
      PrepareBuilder();
      result.hasTime = false;
      result.time_ = 0;
      return this;
    }
    
    public bool HasMapview {
      get { return result.hasMapview; }
    }
    public int Mapview {
      get { return result.Mapview; }
      set { SetMapview(value); }
    }
    public Builder SetMapview(int value) {
      PrepareBuilder();
      result.hasMapview = true;
      result.mapview_ = value;
      return this;
    }
    public Builder ClearMapview() {
      PrepareBuilder();
      result.hasMapview = false;
      result.mapview_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<int> MonstertableList {
      get { return PrepareBuilder().monstertable_; }
    }
    public int MonstertableCount {
      get { return result.MonstertableCount; }
    }
    public int GetMonstertable(int index) {
      return result.GetMonstertable(index);
    }
    public Builder SetMonstertable(int index, int value) {
      PrepareBuilder();
      result.monstertable_[index] = value;
      return this;
    }
    public Builder AddMonstertable(int value) {
      PrepareBuilder();
      result.monstertable_.Add(value);
      return this;
    }
    public Builder AddRangeMonstertable(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.monstertable_.Add(values);
      return this;
    }
    public Builder ClearMonstertable() {
      PrepareBuilder();
      result.monstertable_.Clear();
      return this;
    }
    
    public bool HasDesc {
      get { return result.hasDesc; }
    }
    public pb::ByteString Desc {
      get { return result.Desc; }
      set { SetDesc(value); }
    }
    public Builder SetDesc(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDesc = true;
      result.desc_ = value;
      return this;
    }
    public Builder ClearDesc() {
      PrepareBuilder();
      result.hasDesc = false;
      result.desc_ = pb::ByteString.Empty;
      return this;
    }
  }
  static ZoneData() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ZoneConfig : pb::GeneratedMessage<ZoneConfig, ZoneConfig.Builder> {
  private ZoneConfig() { }
  private static readonly ZoneConfig defaultInstance = new ZoneConfig().MakeReadOnly();
  private static readonly string[] _zoneConfigFieldNames = new string[] { "zone" };
  private static readonly uint[] _zoneConfigFieldTags = new uint[] { 10 };
  public static ZoneConfig DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ZoneConfig DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ZoneConfig ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_ZoneConfig__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ZoneConfig, ZoneConfig.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_ZoneConfig__FieldAccessorTable; }
  }
  
  public const int ZoneFieldNumber = 1;
  private pbc::PopsicleList<global::ZoneData> zone_ = new pbc::PopsicleList<global::ZoneData>();
  public scg::IList<global::ZoneData> ZoneList {
    get { return zone_; }
  }
  public int ZoneCount {
    get { return zone_.Count; }
  }
  public global::ZoneData GetZone(int index) {
    return zone_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::ZoneData element in ZoneList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _zoneConfigFieldNames;
    if (zone_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], zone_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::ZoneData element in ZoneList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ZoneConfig ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ZoneConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ZoneConfig ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ZoneConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ZoneConfig ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ZoneConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ZoneConfig ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ZoneConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ZoneConfig ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ZoneConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ZoneConfig MakeReadOnly() {
    zone_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ZoneConfig prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ZoneConfig, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ZoneConfig cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ZoneConfig result;
    
    private ZoneConfig PrepareBuilder() {
      if (resultIsReadOnly) {
        ZoneConfig original = result;
        result = new ZoneConfig();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ZoneConfig MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ZoneConfig.Descriptor; }
    }
    
    public override ZoneConfig DefaultInstanceForType {
      get { return global::ZoneConfig.DefaultInstance; }
    }
    
    public override ZoneConfig BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ZoneConfig) {
        return MergeFrom((ZoneConfig) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ZoneConfig other) {
      if (other == global::ZoneConfig.DefaultInstance) return this;
      PrepareBuilder();
      if (other.zone_.Count != 0) {
        result.zone_.Add(other.zone_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_zoneConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _zoneConfigFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.zone_, global::ZoneData.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::ZoneData> ZoneList {
      get { return PrepareBuilder().zone_; }
    }
    public int ZoneCount {
      get { return result.ZoneCount; }
    }
    public global::ZoneData GetZone(int index) {
      return result.GetZone(index);
    }
    public Builder SetZone(int index, global::ZoneData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.zone_[index] = value;
      return this;
    }
    public Builder SetZone(int index, global::ZoneData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.zone_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddZone(global::ZoneData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.zone_.Add(value);
      return this;
    }
    public Builder AddZone(global::ZoneData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.zone_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeZone(scg::IEnumerable<global::ZoneData> values) {
      PrepareBuilder();
      result.zone_.Add(values);
      return this;
    }
    public Builder ClearZone() {
      PrepareBuilder();
      result.zone_.Clear();
      return this;
    }
  }
  static ZoneConfig() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SkillData : pb::GeneratedMessage<SkillData, SkillData.Builder> {
  private SkillData() { }
  private static readonly SkillData defaultInstance = new SkillData().MakeReadOnly();
  private static readonly string[] _skillDataFieldNames = new string[] { "bulletId", "bulletSpeed", "bulletType", "gunView", "hitBuffer1", "hitBuffer2", "hitEffect", "hitValue", "id", "range", "selfBuffer1", "selfBuffer2", "shootSpeed", "type" };
  private static readonly uint[] _skillDataFieldTags = new uint[] { 42, 72, 48, 56, 104, 112, 82, 24, 8, 32, 88, 96, 64, 16 };
  public static SkillData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SkillData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SkillData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_SkillData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SkillData, SkillData.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_SkillData__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int HitValueFieldNumber = 3;
  private bool hasHitValue;
  private int hitValue_;
  public bool HasHitValue {
    get { return hasHitValue; }
  }
  public int HitValue {
    get { return hitValue_; }
  }
  
  public const int RangeFieldNumber = 4;
  private bool hasRange;
  private int range_;
  public bool HasRange {
    get { return hasRange; }
  }
  public int Range {
    get { return range_; }
  }
  
  public const int BulletIdFieldNumber = 5;
  private bool hasBulletId;
  private pb::ByteString bulletId_ = pb::ByteString.Empty;
  public bool HasBulletId {
    get { return hasBulletId; }
  }
  public pb::ByteString BulletId {
    get { return bulletId_; }
  }
  
  public const int BulletTypeFieldNumber = 6;
  private bool hasBulletType;
  private int bulletType_;
  public bool HasBulletType {
    get { return hasBulletType; }
  }
  public int BulletType {
    get { return bulletType_; }
  }
  
  public const int GunViewFieldNumber = 7;
  private bool hasGunView;
  private int gunView_;
  public bool HasGunView {
    get { return hasGunView; }
  }
  public int GunView {
    get { return gunView_; }
  }
  
  public const int ShootSpeedFieldNumber = 8;
  private bool hasShootSpeed;
  private int shootSpeed_;
  public bool HasShootSpeed {
    get { return hasShootSpeed; }
  }
  public int ShootSpeed {
    get { return shootSpeed_; }
  }
  
  public const int BulletSpeedFieldNumber = 9;
  private bool hasBulletSpeed;
  private int bulletSpeed_;
  public bool HasBulletSpeed {
    get { return hasBulletSpeed; }
  }
  public int BulletSpeed {
    get { return bulletSpeed_; }
  }
  
  public const int HitEffectFieldNumber = 10;
  private bool hasHitEffect;
  private pb::ByteString hitEffect_ = pb::ByteString.Empty;
  public bool HasHitEffect {
    get { return hasHitEffect; }
  }
  public pb::ByteString HitEffect {
    get { return hitEffect_; }
  }
  
  public const int SelfBuffer1FieldNumber = 11;
  private bool hasSelfBuffer1;
  private int selfBuffer1_;
  public bool HasSelfBuffer1 {
    get { return hasSelfBuffer1; }
  }
  public int SelfBuffer1 {
    get { return selfBuffer1_; }
  }
  
  public const int SelfBuffer2FieldNumber = 12;
  private bool hasSelfBuffer2;
  private int selfBuffer2_;
  public bool HasSelfBuffer2 {
    get { return hasSelfBuffer2; }
  }
  public int SelfBuffer2 {
    get { return selfBuffer2_; }
  }
  
  public const int HitBuffer1FieldNumber = 13;
  private bool hasHitBuffer1;
  private int hitBuffer1_;
  public bool HasHitBuffer1 {
    get { return hasHitBuffer1; }
  }
  public int HitBuffer1 {
    get { return hitBuffer1_; }
  }
  
  public const int HitBuffer2FieldNumber = 14;
  private bool hasHitBuffer2;
  private int hitBuffer2_;
  public bool HasHitBuffer2 {
    get { return hasHitBuffer2; }
  }
  public int HitBuffer2 {
    get { return hitBuffer2_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasType) return false;
      if (!hasHitValue) return false;
      if (!hasRange) return false;
      if (!hasBulletId) return false;
      if (!hasBulletType) return false;
      if (!hasGunView) return false;
      if (!hasShootSpeed) return false;
      if (!hasBulletSpeed) return false;
      if (!hasHitEffect) return false;
      if (!hasSelfBuffer1) return false;
      if (!hasSelfBuffer2) return false;
      if (!hasHitBuffer1) return false;
      if (!hasHitBuffer2) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _skillDataFieldNames;
    if (hasId) {
      output.WriteSInt32(1, field_names[8], Id);
    }
    if (hasType) {
      output.WriteSInt32(2, field_names[13], Type);
    }
    if (hasHitValue) {
      output.WriteSInt32(3, field_names[7], HitValue);
    }
    if (hasRange) {
      output.WriteSInt32(4, field_names[9], Range);
    }
    if (hasBulletId) {
      output.WriteBytes(5, field_names[0], BulletId);
    }
    if (hasBulletType) {
      output.WriteSInt32(6, field_names[2], BulletType);
    }
    if (hasGunView) {
      output.WriteSInt32(7, field_names[3], GunView);
    }
    if (hasShootSpeed) {
      output.WriteSInt32(8, field_names[12], ShootSpeed);
    }
    if (hasBulletSpeed) {
      output.WriteSInt32(9, field_names[1], BulletSpeed);
    }
    if (hasHitEffect) {
      output.WriteBytes(10, field_names[6], HitEffect);
    }
    if (hasSelfBuffer1) {
      output.WriteSInt32(11, field_names[10], SelfBuffer1);
    }
    if (hasSelfBuffer2) {
      output.WriteSInt32(12, field_names[11], SelfBuffer2);
    }
    if (hasHitBuffer1) {
      output.WriteSInt32(13, field_names[4], HitBuffer1);
    }
    if (hasHitBuffer2) {
      output.WriteSInt32(14, field_names[5], HitBuffer2);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeSInt32Size(2, Type);
      }
      if (hasHitValue) {
        size += pb::CodedOutputStream.ComputeSInt32Size(3, HitValue);
      }
      if (hasRange) {
        size += pb::CodedOutputStream.ComputeSInt32Size(4, Range);
      }
      if (hasBulletId) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, BulletId);
      }
      if (hasBulletType) {
        size += pb::CodedOutputStream.ComputeSInt32Size(6, BulletType);
      }
      if (hasGunView) {
        size += pb::CodedOutputStream.ComputeSInt32Size(7, GunView);
      }
      if (hasShootSpeed) {
        size += pb::CodedOutputStream.ComputeSInt32Size(8, ShootSpeed);
      }
      if (hasBulletSpeed) {
        size += pb::CodedOutputStream.ComputeSInt32Size(9, BulletSpeed);
      }
      if (hasHitEffect) {
        size += pb::CodedOutputStream.ComputeBytesSize(10, HitEffect);
      }
      if (hasSelfBuffer1) {
        size += pb::CodedOutputStream.ComputeSInt32Size(11, SelfBuffer1);
      }
      if (hasSelfBuffer2) {
        size += pb::CodedOutputStream.ComputeSInt32Size(12, SelfBuffer2);
      }
      if (hasHitBuffer1) {
        size += pb::CodedOutputStream.ComputeSInt32Size(13, HitBuffer1);
      }
      if (hasHitBuffer2) {
        size += pb::CodedOutputStream.ComputeSInt32Size(14, HitBuffer2);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static SkillData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SkillData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SkillData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SkillData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SkillData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SkillData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SkillData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SkillData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SkillData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SkillData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SkillData MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SkillData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SkillData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SkillData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SkillData result;
    
    private SkillData PrepareBuilder() {
      if (resultIsReadOnly) {
        SkillData original = result;
        result = new SkillData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SkillData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SkillData.Descriptor; }
    }
    
    public override SkillData DefaultInstanceForType {
      get { return global::SkillData.DefaultInstance; }
    }
    
    public override SkillData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SkillData) {
        return MergeFrom((SkillData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SkillData other) {
      if (other == global::SkillData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasHitValue) {
        HitValue = other.HitValue;
      }
      if (other.HasRange) {
        Range = other.Range;
      }
      if (other.HasBulletId) {
        BulletId = other.BulletId;
      }
      if (other.HasBulletType) {
        BulletType = other.BulletType;
      }
      if (other.HasGunView) {
        GunView = other.GunView;
      }
      if (other.HasShootSpeed) {
        ShootSpeed = other.ShootSpeed;
      }
      if (other.HasBulletSpeed) {
        BulletSpeed = other.BulletSpeed;
      }
      if (other.HasHitEffect) {
        HitEffect = other.HitEffect;
      }
      if (other.HasSelfBuffer1) {
        SelfBuffer1 = other.SelfBuffer1;
      }
      if (other.HasSelfBuffer2) {
        SelfBuffer2 = other.SelfBuffer2;
      }
      if (other.HasHitBuffer1) {
        HitBuffer1 = other.HitBuffer1;
      }
      if (other.HasHitBuffer2) {
        HitBuffer2 = other.HitBuffer2;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_skillDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _skillDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadSInt32(ref result.id_);
            break;
          }
          case 16: {
            result.hasType = input.ReadSInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasHitValue = input.ReadSInt32(ref result.hitValue_);
            break;
          }
          case 32: {
            result.hasRange = input.ReadSInt32(ref result.range_);
            break;
          }
          case 42: {
            result.hasBulletId = input.ReadBytes(ref result.bulletId_);
            break;
          }
          case 48: {
            result.hasBulletType = input.ReadSInt32(ref result.bulletType_);
            break;
          }
          case 56: {
            result.hasGunView = input.ReadSInt32(ref result.gunView_);
            break;
          }
          case 64: {
            result.hasShootSpeed = input.ReadSInt32(ref result.shootSpeed_);
            break;
          }
          case 72: {
            result.hasBulletSpeed = input.ReadSInt32(ref result.bulletSpeed_);
            break;
          }
          case 82: {
            result.hasHitEffect = input.ReadBytes(ref result.hitEffect_);
            break;
          }
          case 88: {
            result.hasSelfBuffer1 = input.ReadSInt32(ref result.selfBuffer1_);
            break;
          }
          case 96: {
            result.hasSelfBuffer2 = input.ReadSInt32(ref result.selfBuffer2_);
            break;
          }
          case 104: {
            result.hasHitBuffer1 = input.ReadSInt32(ref result.hitBuffer1_);
            break;
          }
          case 112: {
            result.hasHitBuffer2 = input.ReadSInt32(ref result.hitBuffer2_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasHitValue {
      get { return result.hasHitValue; }
    }
    public int HitValue {
      get { return result.HitValue; }
      set { SetHitValue(value); }
    }
    public Builder SetHitValue(int value) {
      PrepareBuilder();
      result.hasHitValue = true;
      result.hitValue_ = value;
      return this;
    }
    public Builder ClearHitValue() {
      PrepareBuilder();
      result.hasHitValue = false;
      result.hitValue_ = 0;
      return this;
    }
    
    public bool HasRange {
      get { return result.hasRange; }
    }
    public int Range {
      get { return result.Range; }
      set { SetRange(value); }
    }
    public Builder SetRange(int value) {
      PrepareBuilder();
      result.hasRange = true;
      result.range_ = value;
      return this;
    }
    public Builder ClearRange() {
      PrepareBuilder();
      result.hasRange = false;
      result.range_ = 0;
      return this;
    }
    
    public bool HasBulletId {
      get { return result.hasBulletId; }
    }
    public pb::ByteString BulletId {
      get { return result.BulletId; }
      set { SetBulletId(value); }
    }
    public Builder SetBulletId(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBulletId = true;
      result.bulletId_ = value;
      return this;
    }
    public Builder ClearBulletId() {
      PrepareBuilder();
      result.hasBulletId = false;
      result.bulletId_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasBulletType {
      get { return result.hasBulletType; }
    }
    public int BulletType {
      get { return result.BulletType; }
      set { SetBulletType(value); }
    }
    public Builder SetBulletType(int value) {
      PrepareBuilder();
      result.hasBulletType = true;
      result.bulletType_ = value;
      return this;
    }
    public Builder ClearBulletType() {
      PrepareBuilder();
      result.hasBulletType = false;
      result.bulletType_ = 0;
      return this;
    }
    
    public bool HasGunView {
      get { return result.hasGunView; }
    }
    public int GunView {
      get { return result.GunView; }
      set { SetGunView(value); }
    }
    public Builder SetGunView(int value) {
      PrepareBuilder();
      result.hasGunView = true;
      result.gunView_ = value;
      return this;
    }
    public Builder ClearGunView() {
      PrepareBuilder();
      result.hasGunView = false;
      result.gunView_ = 0;
      return this;
    }
    
    public bool HasShootSpeed {
      get { return result.hasShootSpeed; }
    }
    public int ShootSpeed {
      get { return result.ShootSpeed; }
      set { SetShootSpeed(value); }
    }
    public Builder SetShootSpeed(int value) {
      PrepareBuilder();
      result.hasShootSpeed = true;
      result.shootSpeed_ = value;
      return this;
    }
    public Builder ClearShootSpeed() {
      PrepareBuilder();
      result.hasShootSpeed = false;
      result.shootSpeed_ = 0;
      return this;
    }
    
    public bool HasBulletSpeed {
      get { return result.hasBulletSpeed; }
    }
    public int BulletSpeed {
      get { return result.BulletSpeed; }
      set { SetBulletSpeed(value); }
    }
    public Builder SetBulletSpeed(int value) {
      PrepareBuilder();
      result.hasBulletSpeed = true;
      result.bulletSpeed_ = value;
      return this;
    }
    public Builder ClearBulletSpeed() {
      PrepareBuilder();
      result.hasBulletSpeed = false;
      result.bulletSpeed_ = 0;
      return this;
    }
    
    public bool HasHitEffect {
      get { return result.hasHitEffect; }
    }
    public pb::ByteString HitEffect {
      get { return result.HitEffect; }
      set { SetHitEffect(value); }
    }
    public Builder SetHitEffect(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHitEffect = true;
      result.hitEffect_ = value;
      return this;
    }
    public Builder ClearHitEffect() {
      PrepareBuilder();
      result.hasHitEffect = false;
      result.hitEffect_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasSelfBuffer1 {
      get { return result.hasSelfBuffer1; }
    }
    public int SelfBuffer1 {
      get { return result.SelfBuffer1; }
      set { SetSelfBuffer1(value); }
    }
    public Builder SetSelfBuffer1(int value) {
      PrepareBuilder();
      result.hasSelfBuffer1 = true;
      result.selfBuffer1_ = value;
      return this;
    }
    public Builder ClearSelfBuffer1() {
      PrepareBuilder();
      result.hasSelfBuffer1 = false;
      result.selfBuffer1_ = 0;
      return this;
    }
    
    public bool HasSelfBuffer2 {
      get { return result.hasSelfBuffer2; }
    }
    public int SelfBuffer2 {
      get { return result.SelfBuffer2; }
      set { SetSelfBuffer2(value); }
    }
    public Builder SetSelfBuffer2(int value) {
      PrepareBuilder();
      result.hasSelfBuffer2 = true;
      result.selfBuffer2_ = value;
      return this;
    }
    public Builder ClearSelfBuffer2() {
      PrepareBuilder();
      result.hasSelfBuffer2 = false;
      result.selfBuffer2_ = 0;
      return this;
    }
    
    public bool HasHitBuffer1 {
      get { return result.hasHitBuffer1; }
    }
    public int HitBuffer1 {
      get { return result.HitBuffer1; }
      set { SetHitBuffer1(value); }
    }
    public Builder SetHitBuffer1(int value) {
      PrepareBuilder();
      result.hasHitBuffer1 = true;
      result.hitBuffer1_ = value;
      return this;
    }
    public Builder ClearHitBuffer1() {
      PrepareBuilder();
      result.hasHitBuffer1 = false;
      result.hitBuffer1_ = 0;
      return this;
    }
    
    public bool HasHitBuffer2 {
      get { return result.hasHitBuffer2; }
    }
    public int HitBuffer2 {
      get { return result.HitBuffer2; }
      set { SetHitBuffer2(value); }
    }
    public Builder SetHitBuffer2(int value) {
      PrepareBuilder();
      result.hasHitBuffer2 = true;
      result.hitBuffer2_ = value;
      return this;
    }
    public Builder ClearHitBuffer2() {
      PrepareBuilder();
      result.hasHitBuffer2 = false;
      result.hitBuffer2_ = 0;
      return this;
    }
  }
  static SkillData() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SkillConfig : pb::GeneratedMessage<SkillConfig, SkillConfig.Builder> {
  private SkillConfig() { }
  private static readonly SkillConfig defaultInstance = new SkillConfig().MakeReadOnly();
  private static readonly string[] _skillConfigFieldNames = new string[] { "skill" };
  private static readonly uint[] _skillConfigFieldTags = new uint[] { 10 };
  public static SkillConfig DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SkillConfig DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SkillConfig ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_SkillConfig__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SkillConfig, SkillConfig.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_SkillConfig__FieldAccessorTable; }
  }
  
  public const int SkillFieldNumber = 1;
  private pbc::PopsicleList<global::SkillData> skill_ = new pbc::PopsicleList<global::SkillData>();
  public scg::IList<global::SkillData> SkillList {
    get { return skill_; }
  }
  public int SkillCount {
    get { return skill_.Count; }
  }
  public global::SkillData GetSkill(int index) {
    return skill_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::SkillData element in SkillList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _skillConfigFieldNames;
    if (skill_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], skill_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::SkillData element in SkillList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static SkillConfig ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SkillConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SkillConfig ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SkillConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SkillConfig ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SkillConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SkillConfig ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SkillConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SkillConfig ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SkillConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SkillConfig MakeReadOnly() {
    skill_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SkillConfig prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SkillConfig, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SkillConfig cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SkillConfig result;
    
    private SkillConfig PrepareBuilder() {
      if (resultIsReadOnly) {
        SkillConfig original = result;
        result = new SkillConfig();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SkillConfig MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SkillConfig.Descriptor; }
    }
    
    public override SkillConfig DefaultInstanceForType {
      get { return global::SkillConfig.DefaultInstance; }
    }
    
    public override SkillConfig BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SkillConfig) {
        return MergeFrom((SkillConfig) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SkillConfig other) {
      if (other == global::SkillConfig.DefaultInstance) return this;
      PrepareBuilder();
      if (other.skill_.Count != 0) {
        result.skill_.Add(other.skill_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_skillConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _skillConfigFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.skill_, global::SkillData.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::SkillData> SkillList {
      get { return PrepareBuilder().skill_; }
    }
    public int SkillCount {
      get { return result.SkillCount; }
    }
    public global::SkillData GetSkill(int index) {
      return result.GetSkill(index);
    }
    public Builder SetSkill(int index, global::SkillData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.skill_[index] = value;
      return this;
    }
    public Builder SetSkill(int index, global::SkillData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.skill_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSkill(global::SkillData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.skill_.Add(value);
      return this;
    }
    public Builder AddSkill(global::SkillData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.skill_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSkill(scg::IEnumerable<global::SkillData> values) {
      PrepareBuilder();
      result.skill_.Add(values);
      return this;
    }
    public Builder ClearSkill() {
      PrepareBuilder();
      result.skill_.Clear();
      return this;
    }
  }
  static SkillConfig() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ScenceConfigData : pb::GeneratedMessage<ScenceConfigData, ScenceConfigData.Builder> {
  private ScenceConfigData() { }
  private static readonly ScenceConfigData defaultInstance = new ScenceConfigData().MakeReadOnly();
  private static readonly string[] _scenceConfigDataFieldNames = new string[] { "desc", "id", "name", "view" };
  private static readonly uint[] _scenceConfigDataFieldTags = new uint[] { 34, 8, 18, 26 };
  public static ScenceConfigData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ScenceConfigData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ScenceConfigData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_ScenceConfigData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ScenceConfigData, ScenceConfigData.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_ScenceConfigData__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private pb::ByteString name_ = pb::ByteString.Empty;
  public bool HasName {
    get { return hasName; }
  }
  public pb::ByteString Name {
    get { return name_; }
  }
  
  public const int ViewFieldNumber = 3;
  private bool hasView;
  private pb::ByteString view_ = pb::ByteString.Empty;
  public bool HasView {
    get { return hasView; }
  }
  public pb::ByteString View {
    get { return view_; }
  }
  
  public const int DescFieldNumber = 4;
  private bool hasDesc;
  private pb::ByteString desc_ = pb::ByteString.Empty;
  public bool HasDesc {
    get { return hasDesc; }
  }
  public pb::ByteString Desc {
    get { return desc_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasName) return false;
      if (!hasView) return false;
      if (!hasDesc) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _scenceConfigDataFieldNames;
    if (hasId) {
      output.WriteSInt32(1, field_names[1], Id);
    }
    if (hasName) {
      output.WriteBytes(2, field_names[2], Name);
    }
    if (hasView) {
      output.WriteBytes(3, field_names[3], View);
    }
    if (hasDesc) {
      output.WriteBytes(4, field_names[0], Desc);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeBytesSize(2, Name);
      }
      if (hasView) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, View);
      }
      if (hasDesc) {
        size += pb::CodedOutputStream.ComputeBytesSize(4, Desc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ScenceConfigData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ScenceConfigData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ScenceConfigData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ScenceConfigData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ScenceConfigData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ScenceConfigData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ScenceConfigData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ScenceConfigData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ScenceConfigData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ScenceConfigData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ScenceConfigData MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ScenceConfigData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ScenceConfigData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ScenceConfigData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ScenceConfigData result;
    
    private ScenceConfigData PrepareBuilder() {
      if (resultIsReadOnly) {
        ScenceConfigData original = result;
        result = new ScenceConfigData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ScenceConfigData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ScenceConfigData.Descriptor; }
    }
    
    public override ScenceConfigData DefaultInstanceForType {
      get { return global::ScenceConfigData.DefaultInstance; }
    }
    
    public override ScenceConfigData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ScenceConfigData) {
        return MergeFrom((ScenceConfigData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ScenceConfigData other) {
      if (other == global::ScenceConfigData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasView) {
        View = other.View;
      }
      if (other.HasDesc) {
        Desc = other.Desc;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_scenceConfigDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _scenceConfigDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadSInt32(ref result.id_);
            break;
          }
          case 18: {
            result.hasName = input.ReadBytes(ref result.name_);
            break;
          }
          case 26: {
            result.hasView = input.ReadBytes(ref result.view_);
            break;
          }
          case 34: {
            result.hasDesc = input.ReadBytes(ref result.desc_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public pb::ByteString Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasView {
      get { return result.hasView; }
    }
    public pb::ByteString View {
      get { return result.View; }
      set { SetView(value); }
    }
    public Builder SetView(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasView = true;
      result.view_ = value;
      return this;
    }
    public Builder ClearView() {
      PrepareBuilder();
      result.hasView = false;
      result.view_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasDesc {
      get { return result.hasDesc; }
    }
    public pb::ByteString Desc {
      get { return result.Desc; }
      set { SetDesc(value); }
    }
    public Builder SetDesc(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDesc = true;
      result.desc_ = value;
      return this;
    }
    public Builder ClearDesc() {
      PrepareBuilder();
      result.hasDesc = false;
      result.desc_ = pb::ByteString.Empty;
      return this;
    }
  }
  static ScenceConfigData() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ScenceConfig : pb::GeneratedMessage<ScenceConfig, ScenceConfig.Builder> {
  private ScenceConfig() { }
  private static readonly ScenceConfig defaultInstance = new ScenceConfig().MakeReadOnly();
  private static readonly string[] _scenceConfigFieldNames = new string[] { "scenceConfigs" };
  private static readonly uint[] _scenceConfigFieldTags = new uint[] { 10 };
  public static ScenceConfig DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ScenceConfig DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ScenceConfig ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_ScenceConfig__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ScenceConfig, ScenceConfig.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_ScenceConfig__FieldAccessorTable; }
  }
  
  public const int ScenceConfigsFieldNumber = 1;
  private pbc::PopsicleList<global::ScenceConfigData> scenceConfigs_ = new pbc::PopsicleList<global::ScenceConfigData>();
  public scg::IList<global::ScenceConfigData> ScenceConfigsList {
    get { return scenceConfigs_; }
  }
  public int ScenceConfigsCount {
    get { return scenceConfigs_.Count; }
  }
  public global::ScenceConfigData GetScenceConfigs(int index) {
    return scenceConfigs_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::ScenceConfigData element in ScenceConfigsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _scenceConfigFieldNames;
    if (scenceConfigs_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], scenceConfigs_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::ScenceConfigData element in ScenceConfigsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ScenceConfig ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ScenceConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ScenceConfig ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ScenceConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ScenceConfig ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ScenceConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ScenceConfig ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ScenceConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ScenceConfig ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ScenceConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ScenceConfig MakeReadOnly() {
    scenceConfigs_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ScenceConfig prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ScenceConfig, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ScenceConfig cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ScenceConfig result;
    
    private ScenceConfig PrepareBuilder() {
      if (resultIsReadOnly) {
        ScenceConfig original = result;
        result = new ScenceConfig();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ScenceConfig MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ScenceConfig.Descriptor; }
    }
    
    public override ScenceConfig DefaultInstanceForType {
      get { return global::ScenceConfig.DefaultInstance; }
    }
    
    public override ScenceConfig BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ScenceConfig) {
        return MergeFrom((ScenceConfig) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ScenceConfig other) {
      if (other == global::ScenceConfig.DefaultInstance) return this;
      PrepareBuilder();
      if (other.scenceConfigs_.Count != 0) {
        result.scenceConfigs_.Add(other.scenceConfigs_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_scenceConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _scenceConfigFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.scenceConfigs_, global::ScenceConfigData.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::ScenceConfigData> ScenceConfigsList {
      get { return PrepareBuilder().scenceConfigs_; }
    }
    public int ScenceConfigsCount {
      get { return result.ScenceConfigsCount; }
    }
    public global::ScenceConfigData GetScenceConfigs(int index) {
      return result.GetScenceConfigs(index);
    }
    public Builder SetScenceConfigs(int index, global::ScenceConfigData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.scenceConfigs_[index] = value;
      return this;
    }
    public Builder SetScenceConfigs(int index, global::ScenceConfigData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.scenceConfigs_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddScenceConfigs(global::ScenceConfigData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.scenceConfigs_.Add(value);
      return this;
    }
    public Builder AddScenceConfigs(global::ScenceConfigData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.scenceConfigs_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeScenceConfigs(scg::IEnumerable<global::ScenceConfigData> values) {
      PrepareBuilder();
      result.scenceConfigs_.Add(values);
      return this;
    }
    public Builder ClearScenceConfigs() {
      PrepareBuilder();
      result.scenceConfigs_.Clear();
      return this;
    }
  }
  static ScenceConfig() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MonstertableData : pb::GeneratedMessage<MonstertableData, MonstertableData.Builder> {
  private MonstertableData() { }
  private static readonly MonstertableData defaultInstance = new MonstertableData().MakeReadOnly();
  private static readonly string[] _monstertableDataFieldNames = new string[] { "desc", "dropid", "id", "monsterId", "rate" };
  private static readonly uint[] _monstertableDataFieldTags = new uint[] { 42, 24, 8, 16, 32 };
  public static MonstertableData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MonstertableData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MonstertableData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_MonstertableData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MonstertableData, MonstertableData.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_MonstertableData__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public const int MonsterIdFieldNumber = 2;
  private pbc::PopsicleList<int> monsterId_ = new pbc::PopsicleList<int>();
  public scg::IList<int> MonsterIdList {
    get { return pbc::Lists.AsReadOnly(monsterId_); }
  }
  public int MonsterIdCount {
    get { return monsterId_.Count; }
  }
  public int GetMonsterId(int index) {
    return monsterId_[index];
  }
  
  public const int DropidFieldNumber = 3;
  private bool hasDropid;
  private int dropid_;
  public bool HasDropid {
    get { return hasDropid; }
  }
  public int Dropid {
    get { return dropid_; }
  }
  
  public const int RateFieldNumber = 4;
  private bool hasRate;
  private int rate_;
  public bool HasRate {
    get { return hasRate; }
  }
  public int Rate {
    get { return rate_; }
  }
  
  public const int DescFieldNumber = 5;
  private bool hasDesc;
  private pb::ByteString desc_ = pb::ByteString.Empty;
  public bool HasDesc {
    get { return hasDesc; }
  }
  public pb::ByteString Desc {
    get { return desc_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasDropid) return false;
      if (!hasRate) return false;
      if (!hasDesc) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _monstertableDataFieldNames;
    if (hasId) {
      output.WriteSInt32(1, field_names[2], Id);
    }
    if (monsterId_.Count > 0) {
      output.WriteSInt32Array(2, field_names[3], monsterId_);
    }
    if (hasDropid) {
      output.WriteSInt32(3, field_names[1], Dropid);
    }
    if (hasRate) {
      output.WriteSInt32(4, field_names[4], Rate);
    }
    if (hasDesc) {
      output.WriteBytes(5, field_names[0], Desc);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
      }
      {
        int dataSize = 0;
        foreach (int element in MonsterIdList) {
          dataSize += pb::CodedOutputStream.ComputeSInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * monsterId_.Count;
      }
      if (hasDropid) {
        size += pb::CodedOutputStream.ComputeSInt32Size(3, Dropid);
      }
      if (hasRate) {
        size += pb::CodedOutputStream.ComputeSInt32Size(4, Rate);
      }
      if (hasDesc) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, Desc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static MonstertableData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonstertableData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonstertableData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonstertableData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonstertableData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonstertableData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MonstertableData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MonstertableData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MonstertableData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonstertableData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MonstertableData MakeReadOnly() {
    monsterId_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MonstertableData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MonstertableData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MonstertableData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MonstertableData result;
    
    private MonstertableData PrepareBuilder() {
      if (resultIsReadOnly) {
        MonstertableData original = result;
        result = new MonstertableData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MonstertableData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MonstertableData.Descriptor; }
    }
    
    public override MonstertableData DefaultInstanceForType {
      get { return global::MonstertableData.DefaultInstance; }
    }
    
    public override MonstertableData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MonstertableData) {
        return MergeFrom((MonstertableData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MonstertableData other) {
      if (other == global::MonstertableData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.monsterId_.Count != 0) {
        result.monsterId_.Add(other.monsterId_);
      }
      if (other.HasDropid) {
        Dropid = other.Dropid;
      }
      if (other.HasRate) {
        Rate = other.Rate;
      }
      if (other.HasDesc) {
        Desc = other.Desc;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_monstertableDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _monstertableDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadSInt32(ref result.id_);
            break;
          }
          case 18:
          case 16: {
            input.ReadSInt32Array(tag, field_name, result.monsterId_);
            break;
          }
          case 24: {
            result.hasDropid = input.ReadSInt32(ref result.dropid_);
            break;
          }
          case 32: {
            result.hasRate = input.ReadSInt32(ref result.rate_);
            break;
          }
          case 42: {
            result.hasDesc = input.ReadBytes(ref result.desc_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<int> MonsterIdList {
      get { return PrepareBuilder().monsterId_; }
    }
    public int MonsterIdCount {
      get { return result.MonsterIdCount; }
    }
    public int GetMonsterId(int index) {
      return result.GetMonsterId(index);
    }
    public Builder SetMonsterId(int index, int value) {
      PrepareBuilder();
      result.monsterId_[index] = value;
      return this;
    }
    public Builder AddMonsterId(int value) {
      PrepareBuilder();
      result.monsterId_.Add(value);
      return this;
    }
    public Builder AddRangeMonsterId(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.monsterId_.Add(values);
      return this;
    }
    public Builder ClearMonsterId() {
      PrepareBuilder();
      result.monsterId_.Clear();
      return this;
    }
    
    public bool HasDropid {
      get { return result.hasDropid; }
    }
    public int Dropid {
      get { return result.Dropid; }
      set { SetDropid(value); }
    }
    public Builder SetDropid(int value) {
      PrepareBuilder();
      result.hasDropid = true;
      result.dropid_ = value;
      return this;
    }
    public Builder ClearDropid() {
      PrepareBuilder();
      result.hasDropid = false;
      result.dropid_ = 0;
      return this;
    }
    
    public bool HasRate {
      get { return result.hasRate; }
    }
    public int Rate {
      get { return result.Rate; }
      set { SetRate(value); }
    }
    public Builder SetRate(int value) {
      PrepareBuilder();
      result.hasRate = true;
      result.rate_ = value;
      return this;
    }
    public Builder ClearRate() {
      PrepareBuilder();
      result.hasRate = false;
      result.rate_ = 0;
      return this;
    }
    
    public bool HasDesc {
      get { return result.hasDesc; }
    }
    public pb::ByteString Desc {
      get { return result.Desc; }
      set { SetDesc(value); }
    }
    public Builder SetDesc(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDesc = true;
      result.desc_ = value;
      return this;
    }
    public Builder ClearDesc() {
      PrepareBuilder();
      result.hasDesc = false;
      result.desc_ = pb::ByteString.Empty;
      return this;
    }
  }
  static MonstertableData() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MonstertableConfig : pb::GeneratedMessage<MonstertableConfig, MonstertableConfig.Builder> {
  private MonstertableConfig() { }
  private static readonly MonstertableConfig defaultInstance = new MonstertableConfig().MakeReadOnly();
  private static readonly string[] _monstertableConfigFieldNames = new string[] { "monstertable" };
  private static readonly uint[] _monstertableConfigFieldTags = new uint[] { 10 };
  public static MonstertableConfig DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MonstertableConfig DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MonstertableConfig ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_MonstertableConfig__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MonstertableConfig, MonstertableConfig.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_MonstertableConfig__FieldAccessorTable; }
  }
  
  public const int MonstertableFieldNumber = 1;
  private pbc::PopsicleList<global::MonstertableData> monstertable_ = new pbc::PopsicleList<global::MonstertableData>();
  public scg::IList<global::MonstertableData> MonstertableList {
    get { return monstertable_; }
  }
  public int MonstertableCount {
    get { return monstertable_.Count; }
  }
  public global::MonstertableData GetMonstertable(int index) {
    return monstertable_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::MonstertableData element in MonstertableList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _monstertableConfigFieldNames;
    if (monstertable_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], monstertable_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::MonstertableData element in MonstertableList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static MonstertableConfig ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonstertableConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonstertableConfig ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonstertableConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonstertableConfig ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonstertableConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MonstertableConfig ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MonstertableConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MonstertableConfig ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonstertableConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MonstertableConfig MakeReadOnly() {
    monstertable_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MonstertableConfig prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MonstertableConfig, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MonstertableConfig cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MonstertableConfig result;
    
    private MonstertableConfig PrepareBuilder() {
      if (resultIsReadOnly) {
        MonstertableConfig original = result;
        result = new MonstertableConfig();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MonstertableConfig MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MonstertableConfig.Descriptor; }
    }
    
    public override MonstertableConfig DefaultInstanceForType {
      get { return global::MonstertableConfig.DefaultInstance; }
    }
    
    public override MonstertableConfig BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MonstertableConfig) {
        return MergeFrom((MonstertableConfig) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MonstertableConfig other) {
      if (other == global::MonstertableConfig.DefaultInstance) return this;
      PrepareBuilder();
      if (other.monstertable_.Count != 0) {
        result.monstertable_.Add(other.monstertable_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_monstertableConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _monstertableConfigFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.monstertable_, global::MonstertableData.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::MonstertableData> MonstertableList {
      get { return PrepareBuilder().monstertable_; }
    }
    public int MonstertableCount {
      get { return result.MonstertableCount; }
    }
    public global::MonstertableData GetMonstertable(int index) {
      return result.GetMonstertable(index);
    }
    public Builder SetMonstertable(int index, global::MonstertableData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.monstertable_[index] = value;
      return this;
    }
    public Builder SetMonstertable(int index, global::MonstertableData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.monstertable_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMonstertable(global::MonstertableData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.monstertable_.Add(value);
      return this;
    }
    public Builder AddMonstertable(global::MonstertableData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.monstertable_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMonstertable(scg::IEnumerable<global::MonstertableData> values) {
      PrepareBuilder();
      result.monstertable_.Add(values);
      return this;
    }
    public Builder ClearMonstertable() {
      PrepareBuilder();
      result.monstertable_.Clear();
      return this;
    }
  }
  static MonstertableConfig() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MonsterAiData : pb::GeneratedMessage<MonsterAiData, MonsterAiData.Builder> {
  private MonsterAiData() { }
  private static readonly MonsterAiData defaultInstance = new MonsterAiData().MakeReadOnly();
  private static readonly string[] _monsterAiDataFieldNames = new string[] { "id", "point1", "point2", "point3", "point4", "point5", "point6", "type" };
  private static readonly uint[] _monsterAiDataFieldTags = new uint[] { 8, 24, 32, 40, 48, 56, 64, 16 };
  public static MonsterAiData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MonsterAiData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MonsterAiData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_MonsterAiData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MonsterAiData, MonsterAiData.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_MonsterAiData__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int Point1FieldNumber = 3;
  private bool hasPoint1;
  private int point1_;
  public bool HasPoint1 {
    get { return hasPoint1; }
  }
  public int Point1 {
    get { return point1_; }
  }
  
  public const int Point2FieldNumber = 4;
  private bool hasPoint2;
  private int point2_;
  public bool HasPoint2 {
    get { return hasPoint2; }
  }
  public int Point2 {
    get { return point2_; }
  }
  
  public const int Point3FieldNumber = 5;
  private bool hasPoint3;
  private int point3_;
  public bool HasPoint3 {
    get { return hasPoint3; }
  }
  public int Point3 {
    get { return point3_; }
  }
  
  public const int Point4FieldNumber = 6;
  private bool hasPoint4;
  private int point4_;
  public bool HasPoint4 {
    get { return hasPoint4; }
  }
  public int Point4 {
    get { return point4_; }
  }
  
  public const int Point5FieldNumber = 7;
  private bool hasPoint5;
  private int point5_;
  public bool HasPoint5 {
    get { return hasPoint5; }
  }
  public int Point5 {
    get { return point5_; }
  }
  
  public const int Point6FieldNumber = 8;
  private bool hasPoint6;
  private int point6_;
  public bool HasPoint6 {
    get { return hasPoint6; }
  }
  public int Point6 {
    get { return point6_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasType) return false;
      if (!hasPoint1) return false;
      if (!hasPoint2) return false;
      if (!hasPoint3) return false;
      if (!hasPoint4) return false;
      if (!hasPoint5) return false;
      if (!hasPoint6) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _monsterAiDataFieldNames;
    if (hasId) {
      output.WriteSInt32(1, field_names[0], Id);
    }
    if (hasType) {
      output.WriteSInt32(2, field_names[7], Type);
    }
    if (hasPoint1) {
      output.WriteSInt32(3, field_names[1], Point1);
    }
    if (hasPoint2) {
      output.WriteSInt32(4, field_names[2], Point2);
    }
    if (hasPoint3) {
      output.WriteSInt32(5, field_names[3], Point3);
    }
    if (hasPoint4) {
      output.WriteSInt32(6, field_names[4], Point4);
    }
    if (hasPoint5) {
      output.WriteSInt32(7, field_names[5], Point5);
    }
    if (hasPoint6) {
      output.WriteSInt32(8, field_names[6], Point6);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeSInt32Size(2, Type);
      }
      if (hasPoint1) {
        size += pb::CodedOutputStream.ComputeSInt32Size(3, Point1);
      }
      if (hasPoint2) {
        size += pb::CodedOutputStream.ComputeSInt32Size(4, Point2);
      }
      if (hasPoint3) {
        size += pb::CodedOutputStream.ComputeSInt32Size(5, Point3);
      }
      if (hasPoint4) {
        size += pb::CodedOutputStream.ComputeSInt32Size(6, Point4);
      }
      if (hasPoint5) {
        size += pb::CodedOutputStream.ComputeSInt32Size(7, Point5);
      }
      if (hasPoint6) {
        size += pb::CodedOutputStream.ComputeSInt32Size(8, Point6);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static MonsterAiData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonsterAiData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonsterAiData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonsterAiData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonsterAiData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonsterAiData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MonsterAiData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MonsterAiData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MonsterAiData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonsterAiData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MonsterAiData MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MonsterAiData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MonsterAiData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MonsterAiData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MonsterAiData result;
    
    private MonsterAiData PrepareBuilder() {
      if (resultIsReadOnly) {
        MonsterAiData original = result;
        result = new MonsterAiData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MonsterAiData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MonsterAiData.Descriptor; }
    }
    
    public override MonsterAiData DefaultInstanceForType {
      get { return global::MonsterAiData.DefaultInstance; }
    }
    
    public override MonsterAiData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MonsterAiData) {
        return MergeFrom((MonsterAiData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MonsterAiData other) {
      if (other == global::MonsterAiData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasPoint1) {
        Point1 = other.Point1;
      }
      if (other.HasPoint2) {
        Point2 = other.Point2;
      }
      if (other.HasPoint3) {
        Point3 = other.Point3;
      }
      if (other.HasPoint4) {
        Point4 = other.Point4;
      }
      if (other.HasPoint5) {
        Point5 = other.Point5;
      }
      if (other.HasPoint6) {
        Point6 = other.Point6;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_monsterAiDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _monsterAiDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadSInt32(ref result.id_);
            break;
          }
          case 16: {
            result.hasType = input.ReadSInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasPoint1 = input.ReadSInt32(ref result.point1_);
            break;
          }
          case 32: {
            result.hasPoint2 = input.ReadSInt32(ref result.point2_);
            break;
          }
          case 40: {
            result.hasPoint3 = input.ReadSInt32(ref result.point3_);
            break;
          }
          case 48: {
            result.hasPoint4 = input.ReadSInt32(ref result.point4_);
            break;
          }
          case 56: {
            result.hasPoint5 = input.ReadSInt32(ref result.point5_);
            break;
          }
          case 64: {
            result.hasPoint6 = input.ReadSInt32(ref result.point6_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasPoint1 {
      get { return result.hasPoint1; }
    }
    public int Point1 {
      get { return result.Point1; }
      set { SetPoint1(value); }
    }
    public Builder SetPoint1(int value) {
      PrepareBuilder();
      result.hasPoint1 = true;
      result.point1_ = value;
      return this;
    }
    public Builder ClearPoint1() {
      PrepareBuilder();
      result.hasPoint1 = false;
      result.point1_ = 0;
      return this;
    }
    
    public bool HasPoint2 {
      get { return result.hasPoint2; }
    }
    public int Point2 {
      get { return result.Point2; }
      set { SetPoint2(value); }
    }
    public Builder SetPoint2(int value) {
      PrepareBuilder();
      result.hasPoint2 = true;
      result.point2_ = value;
      return this;
    }
    public Builder ClearPoint2() {
      PrepareBuilder();
      result.hasPoint2 = false;
      result.point2_ = 0;
      return this;
    }
    
    public bool HasPoint3 {
      get { return result.hasPoint3; }
    }
    public int Point3 {
      get { return result.Point3; }
      set { SetPoint3(value); }
    }
    public Builder SetPoint3(int value) {
      PrepareBuilder();
      result.hasPoint3 = true;
      result.point3_ = value;
      return this;
    }
    public Builder ClearPoint3() {
      PrepareBuilder();
      result.hasPoint3 = false;
      result.point3_ = 0;
      return this;
    }
    
    public bool HasPoint4 {
      get { return result.hasPoint4; }
    }
    public int Point4 {
      get { return result.Point4; }
      set { SetPoint4(value); }
    }
    public Builder SetPoint4(int value) {
      PrepareBuilder();
      result.hasPoint4 = true;
      result.point4_ = value;
      return this;
    }
    public Builder ClearPoint4() {
      PrepareBuilder();
      result.hasPoint4 = false;
      result.point4_ = 0;
      return this;
    }
    
    public bool HasPoint5 {
      get { return result.hasPoint5; }
    }
    public int Point5 {
      get { return result.Point5; }
      set { SetPoint5(value); }
    }
    public Builder SetPoint5(int value) {
      PrepareBuilder();
      result.hasPoint5 = true;
      result.point5_ = value;
      return this;
    }
    public Builder ClearPoint5() {
      PrepareBuilder();
      result.hasPoint5 = false;
      result.point5_ = 0;
      return this;
    }
    
    public bool HasPoint6 {
      get { return result.hasPoint6; }
    }
    public int Point6 {
      get { return result.Point6; }
      set { SetPoint6(value); }
    }
    public Builder SetPoint6(int value) {
      PrepareBuilder();
      result.hasPoint6 = true;
      result.point6_ = value;
      return this;
    }
    public Builder ClearPoint6() {
      PrepareBuilder();
      result.hasPoint6 = false;
      result.point6_ = 0;
      return this;
    }
  }
  static MonsterAiData() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MonsterAiConfig : pb::GeneratedMessage<MonsterAiConfig, MonsterAiConfig.Builder> {
  private MonsterAiConfig() { }
  private static readonly MonsterAiConfig defaultInstance = new MonsterAiConfig().MakeReadOnly();
  private static readonly string[] _monsterAiConfigFieldNames = new string[] { "monsterAi" };
  private static readonly uint[] _monsterAiConfigFieldTags = new uint[] { 10 };
  public static MonsterAiConfig DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MonsterAiConfig DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MonsterAiConfig ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_MonsterAiConfig__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MonsterAiConfig, MonsterAiConfig.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_MonsterAiConfig__FieldAccessorTable; }
  }
  
  public const int MonsterAiFieldNumber = 1;
  private pbc::PopsicleList<global::MonsterAiData> monsterAi_ = new pbc::PopsicleList<global::MonsterAiData>();
  public scg::IList<global::MonsterAiData> MonsterAiList {
    get { return monsterAi_; }
  }
  public int MonsterAiCount {
    get { return monsterAi_.Count; }
  }
  public global::MonsterAiData GetMonsterAi(int index) {
    return monsterAi_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::MonsterAiData element in MonsterAiList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _monsterAiConfigFieldNames;
    if (monsterAi_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], monsterAi_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::MonsterAiData element in MonsterAiList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static MonsterAiConfig ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonsterAiConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonsterAiConfig ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonsterAiConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonsterAiConfig ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonsterAiConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MonsterAiConfig ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MonsterAiConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MonsterAiConfig ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonsterAiConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MonsterAiConfig MakeReadOnly() {
    monsterAi_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MonsterAiConfig prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MonsterAiConfig, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MonsterAiConfig cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MonsterAiConfig result;
    
    private MonsterAiConfig PrepareBuilder() {
      if (resultIsReadOnly) {
        MonsterAiConfig original = result;
        result = new MonsterAiConfig();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MonsterAiConfig MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MonsterAiConfig.Descriptor; }
    }
    
    public override MonsterAiConfig DefaultInstanceForType {
      get { return global::MonsterAiConfig.DefaultInstance; }
    }
    
    public override MonsterAiConfig BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MonsterAiConfig) {
        return MergeFrom((MonsterAiConfig) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MonsterAiConfig other) {
      if (other == global::MonsterAiConfig.DefaultInstance) return this;
      PrepareBuilder();
      if (other.monsterAi_.Count != 0) {
        result.monsterAi_.Add(other.monsterAi_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_monsterAiConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _monsterAiConfigFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.monsterAi_, global::MonsterAiData.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::MonsterAiData> MonsterAiList {
      get { return PrepareBuilder().monsterAi_; }
    }
    public int MonsterAiCount {
      get { return result.MonsterAiCount; }
    }
    public global::MonsterAiData GetMonsterAi(int index) {
      return result.GetMonsterAi(index);
    }
    public Builder SetMonsterAi(int index, global::MonsterAiData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.monsterAi_[index] = value;
      return this;
    }
    public Builder SetMonsterAi(int index, global::MonsterAiData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.monsterAi_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMonsterAi(global::MonsterAiData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.monsterAi_.Add(value);
      return this;
    }
    public Builder AddMonsterAi(global::MonsterAiData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.monsterAi_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMonsterAi(scg::IEnumerable<global::MonsterAiData> values) {
      PrepareBuilder();
      result.monsterAi_.Add(values);
      return this;
    }
    public Builder ClearMonsterAi() {
      PrepareBuilder();
      result.monsterAi_.Clear();
      return this;
    }
  }
  static MonsterAiConfig() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MonsterData : pb::GeneratedMessage<MonsterData, MonsterData.Builder> {
  private MonsterData() { }
  private static readonly MonsterData defaultInstance = new MonsterData().MakeReadOnly();
  private static readonly string[] _monsterDataFieldNames = new string[] { "aiId", "hp", "id", "skill1", "skill2", "skill3", "skill4", "skill5", "skill6", "speed", "type", "view" };
  private static readonly uint[] _monsterDataFieldTags = new uint[] { 48, 24, 8, 56, 64, 72, 80, 88, 96, 32, 16, 42 };
  public static MonsterData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MonsterData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MonsterData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_MonsterData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MonsterData, MonsterData.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_MonsterData__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int HpFieldNumber = 3;
  private bool hasHp;
  private int hp_;
  public bool HasHp {
    get { return hasHp; }
  }
  public int Hp {
    get { return hp_; }
  }
  
  public const int SpeedFieldNumber = 4;
  private bool hasSpeed;
  private int speed_;
  public bool HasSpeed {
    get { return hasSpeed; }
  }
  public int Speed {
    get { return speed_; }
  }
  
  public const int ViewFieldNumber = 5;
  private bool hasView;
  private pb::ByteString view_ = pb::ByteString.Empty;
  public bool HasView {
    get { return hasView; }
  }
  public pb::ByteString View {
    get { return view_; }
  }
  
  public const int AiIdFieldNumber = 6;
  private bool hasAiId;
  private int aiId_;
  public bool HasAiId {
    get { return hasAiId; }
  }
  public int AiId {
    get { return aiId_; }
  }
  
  public const int Skill1FieldNumber = 7;
  private bool hasSkill1;
  private int skill1_;
  public bool HasSkill1 {
    get { return hasSkill1; }
  }
  public int Skill1 {
    get { return skill1_; }
  }
  
  public const int Skill2FieldNumber = 8;
  private bool hasSkill2;
  private int skill2_;
  public bool HasSkill2 {
    get { return hasSkill2; }
  }
  public int Skill2 {
    get { return skill2_; }
  }
  
  public const int Skill3FieldNumber = 9;
  private bool hasSkill3;
  private int skill3_;
  public bool HasSkill3 {
    get { return hasSkill3; }
  }
  public int Skill3 {
    get { return skill3_; }
  }
  
  public const int Skill4FieldNumber = 10;
  private bool hasSkill4;
  private int skill4_;
  public bool HasSkill4 {
    get { return hasSkill4; }
  }
  public int Skill4 {
    get { return skill4_; }
  }
  
  public const int Skill5FieldNumber = 11;
  private bool hasSkill5;
  private int skill5_;
  public bool HasSkill5 {
    get { return hasSkill5; }
  }
  public int Skill5 {
    get { return skill5_; }
  }
  
  public const int Skill6FieldNumber = 12;
  private bool hasSkill6;
  private int skill6_;
  public bool HasSkill6 {
    get { return hasSkill6; }
  }
  public int Skill6 {
    get { return skill6_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasType) return false;
      if (!hasHp) return false;
      if (!hasSpeed) return false;
      if (!hasView) return false;
      if (!hasAiId) return false;
      if (!hasSkill1) return false;
      if (!hasSkill2) return false;
      if (!hasSkill3) return false;
      if (!hasSkill4) return false;
      if (!hasSkill5) return false;
      if (!hasSkill6) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _monsterDataFieldNames;
    if (hasId) {
      output.WriteSInt32(1, field_names[2], Id);
    }
    if (hasType) {
      output.WriteSInt32(2, field_names[10], Type);
    }
    if (hasHp) {
      output.WriteSInt32(3, field_names[1], Hp);
    }
    if (hasSpeed) {
      output.WriteSInt32(4, field_names[9], Speed);
    }
    if (hasView) {
      output.WriteBytes(5, field_names[11], View);
    }
    if (hasAiId) {
      output.WriteSInt32(6, field_names[0], AiId);
    }
    if (hasSkill1) {
      output.WriteSInt32(7, field_names[3], Skill1);
    }
    if (hasSkill2) {
      output.WriteSInt32(8, field_names[4], Skill2);
    }
    if (hasSkill3) {
      output.WriteSInt32(9, field_names[5], Skill3);
    }
    if (hasSkill4) {
      output.WriteSInt32(10, field_names[6], Skill4);
    }
    if (hasSkill5) {
      output.WriteSInt32(11, field_names[7], Skill5);
    }
    if (hasSkill6) {
      output.WriteSInt32(12, field_names[8], Skill6);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeSInt32Size(2, Type);
      }
      if (hasHp) {
        size += pb::CodedOutputStream.ComputeSInt32Size(3, Hp);
      }
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeSInt32Size(4, Speed);
      }
      if (hasView) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, View);
      }
      if (hasAiId) {
        size += pb::CodedOutputStream.ComputeSInt32Size(6, AiId);
      }
      if (hasSkill1) {
        size += pb::CodedOutputStream.ComputeSInt32Size(7, Skill1);
      }
      if (hasSkill2) {
        size += pb::CodedOutputStream.ComputeSInt32Size(8, Skill2);
      }
      if (hasSkill3) {
        size += pb::CodedOutputStream.ComputeSInt32Size(9, Skill3);
      }
      if (hasSkill4) {
        size += pb::CodedOutputStream.ComputeSInt32Size(10, Skill4);
      }
      if (hasSkill5) {
        size += pb::CodedOutputStream.ComputeSInt32Size(11, Skill5);
      }
      if (hasSkill6) {
        size += pb::CodedOutputStream.ComputeSInt32Size(12, Skill6);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static MonsterData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonsterData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonsterData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonsterData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonsterData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonsterData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MonsterData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MonsterData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MonsterData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonsterData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MonsterData MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MonsterData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MonsterData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MonsterData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MonsterData result;
    
    private MonsterData PrepareBuilder() {
      if (resultIsReadOnly) {
        MonsterData original = result;
        result = new MonsterData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MonsterData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MonsterData.Descriptor; }
    }
    
    public override MonsterData DefaultInstanceForType {
      get { return global::MonsterData.DefaultInstance; }
    }
    
    public override MonsterData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MonsterData) {
        return MergeFrom((MonsterData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MonsterData other) {
      if (other == global::MonsterData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasHp) {
        Hp = other.Hp;
      }
      if (other.HasSpeed) {
        Speed = other.Speed;
      }
      if (other.HasView) {
        View = other.View;
      }
      if (other.HasAiId) {
        AiId = other.AiId;
      }
      if (other.HasSkill1) {
        Skill1 = other.Skill1;
      }
      if (other.HasSkill2) {
        Skill2 = other.Skill2;
      }
      if (other.HasSkill3) {
        Skill3 = other.Skill3;
      }
      if (other.HasSkill4) {
        Skill4 = other.Skill4;
      }
      if (other.HasSkill5) {
        Skill5 = other.Skill5;
      }
      if (other.HasSkill6) {
        Skill6 = other.Skill6;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_monsterDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _monsterDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadSInt32(ref result.id_);
            break;
          }
          case 16: {
            result.hasType = input.ReadSInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasHp = input.ReadSInt32(ref result.hp_);
            break;
          }
          case 32: {
            result.hasSpeed = input.ReadSInt32(ref result.speed_);
            break;
          }
          case 42: {
            result.hasView = input.ReadBytes(ref result.view_);
            break;
          }
          case 48: {
            result.hasAiId = input.ReadSInt32(ref result.aiId_);
            break;
          }
          case 56: {
            result.hasSkill1 = input.ReadSInt32(ref result.skill1_);
            break;
          }
          case 64: {
            result.hasSkill2 = input.ReadSInt32(ref result.skill2_);
            break;
          }
          case 72: {
            result.hasSkill3 = input.ReadSInt32(ref result.skill3_);
            break;
          }
          case 80: {
            result.hasSkill4 = input.ReadSInt32(ref result.skill4_);
            break;
          }
          case 88: {
            result.hasSkill5 = input.ReadSInt32(ref result.skill5_);
            break;
          }
          case 96: {
            result.hasSkill6 = input.ReadSInt32(ref result.skill6_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasHp {
      get { return result.hasHp; }
    }
    public int Hp {
      get { return result.Hp; }
      set { SetHp(value); }
    }
    public Builder SetHp(int value) {
      PrepareBuilder();
      result.hasHp = true;
      result.hp_ = value;
      return this;
    }
    public Builder ClearHp() {
      PrepareBuilder();
      result.hasHp = false;
      result.hp_ = 0;
      return this;
    }
    
    public bool HasSpeed {
      get { return result.hasSpeed; }
    }
    public int Speed {
      get { return result.Speed; }
      set { SetSpeed(value); }
    }
    public Builder SetSpeed(int value) {
      PrepareBuilder();
      result.hasSpeed = true;
      result.speed_ = value;
      return this;
    }
    public Builder ClearSpeed() {
      PrepareBuilder();
      result.hasSpeed = false;
      result.speed_ = 0;
      return this;
    }
    
    public bool HasView {
      get { return result.hasView; }
    }
    public pb::ByteString View {
      get { return result.View; }
      set { SetView(value); }
    }
    public Builder SetView(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasView = true;
      result.view_ = value;
      return this;
    }
    public Builder ClearView() {
      PrepareBuilder();
      result.hasView = false;
      result.view_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasAiId {
      get { return result.hasAiId; }
    }
    public int AiId {
      get { return result.AiId; }
      set { SetAiId(value); }
    }
    public Builder SetAiId(int value) {
      PrepareBuilder();
      result.hasAiId = true;
      result.aiId_ = value;
      return this;
    }
    public Builder ClearAiId() {
      PrepareBuilder();
      result.hasAiId = false;
      result.aiId_ = 0;
      return this;
    }
    
    public bool HasSkill1 {
      get { return result.hasSkill1; }
    }
    public int Skill1 {
      get { return result.Skill1; }
      set { SetSkill1(value); }
    }
    public Builder SetSkill1(int value) {
      PrepareBuilder();
      result.hasSkill1 = true;
      result.skill1_ = value;
      return this;
    }
    public Builder ClearSkill1() {
      PrepareBuilder();
      result.hasSkill1 = false;
      result.skill1_ = 0;
      return this;
    }
    
    public bool HasSkill2 {
      get { return result.hasSkill2; }
    }
    public int Skill2 {
      get { return result.Skill2; }
      set { SetSkill2(value); }
    }
    public Builder SetSkill2(int value) {
      PrepareBuilder();
      result.hasSkill2 = true;
      result.skill2_ = value;
      return this;
    }
    public Builder ClearSkill2() {
      PrepareBuilder();
      result.hasSkill2 = false;
      result.skill2_ = 0;
      return this;
    }
    
    public bool HasSkill3 {
      get { return result.hasSkill3; }
    }
    public int Skill3 {
      get { return result.Skill3; }
      set { SetSkill3(value); }
    }
    public Builder SetSkill3(int value) {
      PrepareBuilder();
      result.hasSkill3 = true;
      result.skill3_ = value;
      return this;
    }
    public Builder ClearSkill3() {
      PrepareBuilder();
      result.hasSkill3 = false;
      result.skill3_ = 0;
      return this;
    }
    
    public bool HasSkill4 {
      get { return result.hasSkill4; }
    }
    public int Skill4 {
      get { return result.Skill4; }
      set { SetSkill4(value); }
    }
    public Builder SetSkill4(int value) {
      PrepareBuilder();
      result.hasSkill4 = true;
      result.skill4_ = value;
      return this;
    }
    public Builder ClearSkill4() {
      PrepareBuilder();
      result.hasSkill4 = false;
      result.skill4_ = 0;
      return this;
    }
    
    public bool HasSkill5 {
      get { return result.hasSkill5; }
    }
    public int Skill5 {
      get { return result.Skill5; }
      set { SetSkill5(value); }
    }
    public Builder SetSkill5(int value) {
      PrepareBuilder();
      result.hasSkill5 = true;
      result.skill5_ = value;
      return this;
    }
    public Builder ClearSkill5() {
      PrepareBuilder();
      result.hasSkill5 = false;
      result.skill5_ = 0;
      return this;
    }
    
    public bool HasSkill6 {
      get { return result.hasSkill6; }
    }
    public int Skill6 {
      get { return result.Skill6; }
      set { SetSkill6(value); }
    }
    public Builder SetSkill6(int value) {
      PrepareBuilder();
      result.hasSkill6 = true;
      result.skill6_ = value;
      return this;
    }
    public Builder ClearSkill6() {
      PrepareBuilder();
      result.hasSkill6 = false;
      result.skill6_ = 0;
      return this;
    }
  }
  static MonsterData() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MonsterConfig : pb::GeneratedMessage<MonsterConfig, MonsterConfig.Builder> {
  private MonsterConfig() { }
  private static readonly MonsterConfig defaultInstance = new MonsterConfig().MakeReadOnly();
  private static readonly string[] _monsterConfigFieldNames = new string[] { "monster" };
  private static readonly uint[] _monsterConfigFieldTags = new uint[] { 10 };
  public static MonsterConfig DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MonsterConfig DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MonsterConfig ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_MonsterConfig__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MonsterConfig, MonsterConfig.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_MonsterConfig__FieldAccessorTable; }
  }
  
  public const int MonsterFieldNumber = 1;
  private pbc::PopsicleList<global::MonsterData> monster_ = new pbc::PopsicleList<global::MonsterData>();
  public scg::IList<global::MonsterData> MonsterList {
    get { return monster_; }
  }
  public int MonsterCount {
    get { return monster_.Count; }
  }
  public global::MonsterData GetMonster(int index) {
    return monster_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::MonsterData element in MonsterList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _monsterConfigFieldNames;
    if (monster_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], monster_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::MonsterData element in MonsterList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static MonsterConfig ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonsterConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonsterConfig ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MonsterConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MonsterConfig ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonsterConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MonsterConfig ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MonsterConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MonsterConfig ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MonsterConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MonsterConfig MakeReadOnly() {
    monster_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MonsterConfig prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MonsterConfig, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MonsterConfig cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MonsterConfig result;
    
    private MonsterConfig PrepareBuilder() {
      if (resultIsReadOnly) {
        MonsterConfig original = result;
        result = new MonsterConfig();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MonsterConfig MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MonsterConfig.Descriptor; }
    }
    
    public override MonsterConfig DefaultInstanceForType {
      get { return global::MonsterConfig.DefaultInstance; }
    }
    
    public override MonsterConfig BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MonsterConfig) {
        return MergeFrom((MonsterConfig) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MonsterConfig other) {
      if (other == global::MonsterConfig.DefaultInstance) return this;
      PrepareBuilder();
      if (other.monster_.Count != 0) {
        result.monster_.Add(other.monster_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_monsterConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _monsterConfigFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.monster_, global::MonsterData.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::MonsterData> MonsterList {
      get { return PrepareBuilder().monster_; }
    }
    public int MonsterCount {
      get { return result.MonsterCount; }
    }
    public global::MonsterData GetMonster(int index) {
      return result.GetMonster(index);
    }
    public Builder SetMonster(int index, global::MonsterData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.monster_[index] = value;
      return this;
    }
    public Builder SetMonster(int index, global::MonsterData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.monster_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMonster(global::MonsterData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.monster_.Add(value);
      return this;
    }
    public Builder AddMonster(global::MonsterData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.monster_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMonster(scg::IEnumerable<global::MonsterData> values) {
      PrepareBuilder();
      result.monster_.Add(values);
      return this;
    }
    public Builder ClearMonster() {
      PrepareBuilder();
      result.monster_.Clear();
      return this;
    }
  }
  static MonsterConfig() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DropData : pb::GeneratedMessage<DropData, DropData.Builder> {
  private DropData() { }
  private static readonly DropData defaultInstance = new DropData().MakeReadOnly();
  private static readonly string[] _dropDataFieldNames = new string[] { "count", "desc", "gropId", "itemid", "rate", "type" };
  private static readonly uint[] _dropDataFieldTags = new uint[] { 40, 50, 8, 24, 32, 16 };
  public static DropData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DropData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DropData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_DropData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DropData, DropData.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_DropData__FieldAccessorTable; }
  }
  
  public const int GropIdFieldNumber = 1;
  private bool hasGropId;
  private int gropId_;
  public bool HasGropId {
    get { return hasGropId; }
  }
  public int GropId {
    get { return gropId_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int ItemidFieldNumber = 3;
  private bool hasItemid;
  private int itemid_;
  public bool HasItemid {
    get { return hasItemid; }
  }
  public int Itemid {
    get { return itemid_; }
  }
  
  public const int RateFieldNumber = 4;
  private bool hasRate;
  private int rate_;
  public bool HasRate {
    get { return hasRate; }
  }
  public int Rate {
    get { return rate_; }
  }
  
  public const int CountFieldNumber = 5;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public const int DescFieldNumber = 6;
  private bool hasDesc;
  private pb::ByteString desc_ = pb::ByteString.Empty;
  public bool HasDesc {
    get { return hasDesc; }
  }
  public pb::ByteString Desc {
    get { return desc_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasGropId) return false;
      if (!hasType) return false;
      if (!hasItemid) return false;
      if (!hasRate) return false;
      if (!hasCount) return false;
      if (!hasDesc) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _dropDataFieldNames;
    if (hasGropId) {
      output.WriteSInt32(1, field_names[2], GropId);
    }
    if (hasType) {
      output.WriteSInt32(2, field_names[5], Type);
    }
    if (hasItemid) {
      output.WriteSInt32(3, field_names[3], Itemid);
    }
    if (hasRate) {
      output.WriteSInt32(4, field_names[4], Rate);
    }
    if (hasCount) {
      output.WriteSInt32(5, field_names[0], Count);
    }
    if (hasDesc) {
      output.WriteBytes(6, field_names[1], Desc);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGropId) {
        size += pb::CodedOutputStream.ComputeSInt32Size(1, GropId);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeSInt32Size(2, Type);
      }
      if (hasItemid) {
        size += pb::CodedOutputStream.ComputeSInt32Size(3, Itemid);
      }
      if (hasRate) {
        size += pb::CodedOutputStream.ComputeSInt32Size(4, Rate);
      }
      if (hasCount) {
        size += pb::CodedOutputStream.ComputeSInt32Size(5, Count);
      }
      if (hasDesc) {
        size += pb::CodedOutputStream.ComputeBytesSize(6, Desc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static DropData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DropData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DropData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DropData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DropData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DropData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DropData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DropData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DropData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DropData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DropData MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DropData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DropData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DropData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DropData result;
    
    private DropData PrepareBuilder() {
      if (resultIsReadOnly) {
        DropData original = result;
        result = new DropData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DropData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DropData.Descriptor; }
    }
    
    public override DropData DefaultInstanceForType {
      get { return global::DropData.DefaultInstance; }
    }
    
    public override DropData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DropData) {
        return MergeFrom((DropData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DropData other) {
      if (other == global::DropData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGropId) {
        GropId = other.GropId;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasItemid) {
        Itemid = other.Itemid;
      }
      if (other.HasRate) {
        Rate = other.Rate;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasDesc) {
        Desc = other.Desc;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_dropDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _dropDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGropId = input.ReadSInt32(ref result.gropId_);
            break;
          }
          case 16: {
            result.hasType = input.ReadSInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasItemid = input.ReadSInt32(ref result.itemid_);
            break;
          }
          case 32: {
            result.hasRate = input.ReadSInt32(ref result.rate_);
            break;
          }
          case 40: {
            result.hasCount = input.ReadSInt32(ref result.count_);
            break;
          }
          case 50: {
            result.hasDesc = input.ReadBytes(ref result.desc_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGropId {
      get { return result.hasGropId; }
    }
    public int GropId {
      get { return result.GropId; }
      set { SetGropId(value); }
    }
    public Builder SetGropId(int value) {
      PrepareBuilder();
      result.hasGropId = true;
      result.gropId_ = value;
      return this;
    }
    public Builder ClearGropId() {
      PrepareBuilder();
      result.hasGropId = false;
      result.gropId_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasItemid {
      get { return result.hasItemid; }
    }
    public int Itemid {
      get { return result.Itemid; }
      set { SetItemid(value); }
    }
    public Builder SetItemid(int value) {
      PrepareBuilder();
      result.hasItemid = true;
      result.itemid_ = value;
      return this;
    }
    public Builder ClearItemid() {
      PrepareBuilder();
      result.hasItemid = false;
      result.itemid_ = 0;
      return this;
    }
    
    public bool HasRate {
      get { return result.hasRate; }
    }
    public int Rate {
      get { return result.Rate; }
      set { SetRate(value); }
    }
    public Builder SetRate(int value) {
      PrepareBuilder();
      result.hasRate = true;
      result.rate_ = value;
      return this;
    }
    public Builder ClearRate() {
      PrepareBuilder();
      result.hasRate = false;
      result.rate_ = 0;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
    
    public bool HasDesc {
      get { return result.hasDesc; }
    }
    public pb::ByteString Desc {
      get { return result.Desc; }
      set { SetDesc(value); }
    }
    public Builder SetDesc(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDesc = true;
      result.desc_ = value;
      return this;
    }
    public Builder ClearDesc() {
      PrepareBuilder();
      result.hasDesc = false;
      result.desc_ = pb::ByteString.Empty;
      return this;
    }
  }
  static DropData() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DropConfig : pb::GeneratedMessage<DropConfig, DropConfig.Builder> {
  private DropConfig() { }
  private static readonly DropConfig defaultInstance = new DropConfig().MakeReadOnly();
  private static readonly string[] _dropConfigFieldNames = new string[] { "drop" };
  private static readonly uint[] _dropConfigFieldTags = new uint[] { 10 };
  public static DropConfig DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DropConfig DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DropConfig ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_DropConfig__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DropConfig, DropConfig.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_DropConfig__FieldAccessorTable; }
  }
  
  public const int DropFieldNumber = 1;
  private pbc::PopsicleList<global::DropData> drop_ = new pbc::PopsicleList<global::DropData>();
  public scg::IList<global::DropData> DropList {
    get { return drop_; }
  }
  public int DropCount {
    get { return drop_.Count; }
  }
  public global::DropData GetDrop(int index) {
    return drop_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::DropData element in DropList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _dropConfigFieldNames;
    if (drop_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], drop_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::DropData element in DropList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static DropConfig ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DropConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DropConfig ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DropConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DropConfig ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DropConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DropConfig ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DropConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DropConfig ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DropConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DropConfig MakeReadOnly() {
    drop_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DropConfig prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DropConfig, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DropConfig cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DropConfig result;
    
    private DropConfig PrepareBuilder() {
      if (resultIsReadOnly) {
        DropConfig original = result;
        result = new DropConfig();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DropConfig MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DropConfig.Descriptor; }
    }
    
    public override DropConfig DefaultInstanceForType {
      get { return global::DropConfig.DefaultInstance; }
    }
    
    public override DropConfig BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DropConfig) {
        return MergeFrom((DropConfig) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DropConfig other) {
      if (other == global::DropConfig.DefaultInstance) return this;
      PrepareBuilder();
      if (other.drop_.Count != 0) {
        result.drop_.Add(other.drop_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_dropConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _dropConfigFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.drop_, global::DropData.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::DropData> DropList {
      get { return PrepareBuilder().drop_; }
    }
    public int DropCount {
      get { return result.DropCount; }
    }
    public global::DropData GetDrop(int index) {
      return result.GetDrop(index);
    }
    public Builder SetDrop(int index, global::DropData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.drop_[index] = value;
      return this;
    }
    public Builder SetDrop(int index, global::DropData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.drop_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddDrop(global::DropData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.drop_.Add(value);
      return this;
    }
    public Builder AddDrop(global::DropData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.drop_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeDrop(scg::IEnumerable<global::DropData> values) {
      PrepareBuilder();
      result.drop_.Add(values);
      return this;
    }
    public Builder ClearDrop() {
      PrepareBuilder();
      result.drop_.Clear();
      return this;
    }
  }
  static DropConfig() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CharacterData : pb::GeneratedMessage<CharacterData, CharacterData.Builder> {
  private CharacterData() { }
  private static readonly CharacterData defaultInstance = new CharacterData().MakeReadOnly();
  private static readonly string[] _characterDataFieldNames = new string[] { "attack", "attackspeed", "exp", "hp", "level", "speed" };
  private static readonly uint[] _characterDataFieldTags = new uint[] { 24, 48, 16, 32, 8, 40 };
  public static CharacterData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CharacterData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CharacterData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_CharacterData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CharacterData, CharacterData.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_CharacterData__FieldAccessorTable; }
  }
  
  public const int LevelFieldNumber = 1;
  private bool hasLevel;
  private int level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public int Level {
    get { return level_; }
  }
  
  public const int ExpFieldNumber = 2;
  private bool hasExp;
  private int exp_;
  public bool HasExp {
    get { return hasExp; }
  }
  public int Exp {
    get { return exp_; }
  }
  
  public const int AttackFieldNumber = 3;
  private bool hasAttack;
  private int attack_;
  public bool HasAttack {
    get { return hasAttack; }
  }
  public int Attack {
    get { return attack_; }
  }
  
  public const int HpFieldNumber = 4;
  private bool hasHp;
  private int hp_;
  public bool HasHp {
    get { return hasHp; }
  }
  public int Hp {
    get { return hp_; }
  }
  
  public const int SpeedFieldNumber = 5;
  private bool hasSpeed;
  private int speed_;
  public bool HasSpeed {
    get { return hasSpeed; }
  }
  public int Speed {
    get { return speed_; }
  }
  
  public const int AttackspeedFieldNumber = 6;
  private bool hasAttackspeed;
  private int attackspeed_;
  public bool HasAttackspeed {
    get { return hasAttackspeed; }
  }
  public int Attackspeed {
    get { return attackspeed_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasLevel) return false;
      if (!hasExp) return false;
      if (!hasAttack) return false;
      if (!hasHp) return false;
      if (!hasSpeed) return false;
      if (!hasAttackspeed) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _characterDataFieldNames;
    if (hasLevel) {
      output.WriteSInt32(1, field_names[4], Level);
    }
    if (hasExp) {
      output.WriteSInt32(2, field_names[2], Exp);
    }
    if (hasAttack) {
      output.WriteSInt32(3, field_names[0], Attack);
    }
    if (hasHp) {
      output.WriteSInt32(4, field_names[3], Hp);
    }
    if (hasSpeed) {
      output.WriteSInt32(5, field_names[5], Speed);
    }
    if (hasAttackspeed) {
      output.WriteSInt32(6, field_names[1], Attackspeed);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasLevel) {
        size += pb::CodedOutputStream.ComputeSInt32Size(1, Level);
      }
      if (hasExp) {
        size += pb::CodedOutputStream.ComputeSInt32Size(2, Exp);
      }
      if (hasAttack) {
        size += pb::CodedOutputStream.ComputeSInt32Size(3, Attack);
      }
      if (hasHp) {
        size += pb::CodedOutputStream.ComputeSInt32Size(4, Hp);
      }
      if (hasSpeed) {
        size += pb::CodedOutputStream.ComputeSInt32Size(5, Speed);
      }
      if (hasAttackspeed) {
        size += pb::CodedOutputStream.ComputeSInt32Size(6, Attackspeed);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CharacterData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CharacterData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CharacterData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CharacterData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CharacterData MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CharacterData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CharacterData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CharacterData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CharacterData result;
    
    private CharacterData PrepareBuilder() {
      if (resultIsReadOnly) {
        CharacterData original = result;
        result = new CharacterData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CharacterData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CharacterData.Descriptor; }
    }
    
    public override CharacterData DefaultInstanceForType {
      get { return global::CharacterData.DefaultInstance; }
    }
    
    public override CharacterData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CharacterData) {
        return MergeFrom((CharacterData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CharacterData other) {
      if (other == global::CharacterData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasAttack) {
        Attack = other.Attack;
      }
      if (other.HasHp) {
        Hp = other.Hp;
      }
      if (other.HasSpeed) {
        Speed = other.Speed;
      }
      if (other.HasAttackspeed) {
        Attackspeed = other.Attackspeed;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_characterDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _characterDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasLevel = input.ReadSInt32(ref result.level_);
            break;
          }
          case 16: {
            result.hasExp = input.ReadSInt32(ref result.exp_);
            break;
          }
          case 24: {
            result.hasAttack = input.ReadSInt32(ref result.attack_);
            break;
          }
          case 32: {
            result.hasHp = input.ReadSInt32(ref result.hp_);
            break;
          }
          case 40: {
            result.hasSpeed = input.ReadSInt32(ref result.speed_);
            break;
          }
          case 48: {
            result.hasAttackspeed = input.ReadSInt32(ref result.attackspeed_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasLevel {
      get { return result.hasLevel; }
    }
    public int Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(int value) {
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = 0;
      return this;
    }
    
    public bool HasExp {
      get { return result.hasExp; }
    }
    public int Exp {
      get { return result.Exp; }
      set { SetExp(value); }
    }
    public Builder SetExp(int value) {
      PrepareBuilder();
      result.hasExp = true;
      result.exp_ = value;
      return this;
    }
    public Builder ClearExp() {
      PrepareBuilder();
      result.hasExp = false;
      result.exp_ = 0;
      return this;
    }
    
    public bool HasAttack {
      get { return result.hasAttack; }
    }
    public int Attack {
      get { return result.Attack; }
      set { SetAttack(value); }
    }
    public Builder SetAttack(int value) {
      PrepareBuilder();
      result.hasAttack = true;
      result.attack_ = value;
      return this;
    }
    public Builder ClearAttack() {
      PrepareBuilder();
      result.hasAttack = false;
      result.attack_ = 0;
      return this;
    }
    
    public bool HasHp {
      get { return result.hasHp; }
    }
    public int Hp {
      get { return result.Hp; }
      set { SetHp(value); }
    }
    public Builder SetHp(int value) {
      PrepareBuilder();
      result.hasHp = true;
      result.hp_ = value;
      return this;
    }
    public Builder ClearHp() {
      PrepareBuilder();
      result.hasHp = false;
      result.hp_ = 0;
      return this;
    }
    
    public bool HasSpeed {
      get { return result.hasSpeed; }
    }
    public int Speed {
      get { return result.Speed; }
      set { SetSpeed(value); }
    }
    public Builder SetSpeed(int value) {
      PrepareBuilder();
      result.hasSpeed = true;
      result.speed_ = value;
      return this;
    }
    public Builder ClearSpeed() {
      PrepareBuilder();
      result.hasSpeed = false;
      result.speed_ = 0;
      return this;
    }
    
    public bool HasAttackspeed {
      get { return result.hasAttackspeed; }
    }
    public int Attackspeed {
      get { return result.Attackspeed; }
      set { SetAttackspeed(value); }
    }
    public Builder SetAttackspeed(int value) {
      PrepareBuilder();
      result.hasAttackspeed = true;
      result.attackspeed_ = value;
      return this;
    }
    public Builder ClearAttackspeed() {
      PrepareBuilder();
      result.hasAttackspeed = false;
      result.attackspeed_ = 0;
      return this;
    }
  }
  static CharacterData() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CharacterConfig : pb::GeneratedMessage<CharacterConfig, CharacterConfig.Builder> {
  private CharacterConfig() { }
  private static readonly CharacterConfig defaultInstance = new CharacterConfig().MakeReadOnly();
  private static readonly string[] _characterConfigFieldNames = new string[] { "character" };
  private static readonly uint[] _characterConfigFieldTags = new uint[] { 10 };
  public static CharacterConfig DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CharacterConfig DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CharacterConfig ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_CharacterConfig__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CharacterConfig, CharacterConfig.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_CharacterConfig__FieldAccessorTable; }
  }
  
  public const int CharacterFieldNumber = 1;
  private pbc::PopsicleList<global::CharacterData> character_ = new pbc::PopsicleList<global::CharacterData>();
  public scg::IList<global::CharacterData> CharacterList {
    get { return character_; }
  }
  public int CharacterCount {
    get { return character_.Count; }
  }
  public global::CharacterData GetCharacter(int index) {
    return character_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::CharacterData element in CharacterList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _characterConfigFieldNames;
    if (character_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], character_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::CharacterData element in CharacterList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CharacterConfig ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterConfig ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CharacterConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CharacterConfig ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CharacterConfig ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CharacterConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CharacterConfig ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CharacterConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CharacterConfig MakeReadOnly() {
    character_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CharacterConfig prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CharacterConfig, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CharacterConfig cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CharacterConfig result;
    
    private CharacterConfig PrepareBuilder() {
      if (resultIsReadOnly) {
        CharacterConfig original = result;
        result = new CharacterConfig();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CharacterConfig MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CharacterConfig.Descriptor; }
    }
    
    public override CharacterConfig DefaultInstanceForType {
      get { return global::CharacterConfig.DefaultInstance; }
    }
    
    public override CharacterConfig BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CharacterConfig) {
        return MergeFrom((CharacterConfig) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CharacterConfig other) {
      if (other == global::CharacterConfig.DefaultInstance) return this;
      PrepareBuilder();
      if (other.character_.Count != 0) {
        result.character_.Add(other.character_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_characterConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _characterConfigFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.character_, global::CharacterData.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::CharacterData> CharacterList {
      get { return PrepareBuilder().character_; }
    }
    public int CharacterCount {
      get { return result.CharacterCount; }
    }
    public global::CharacterData GetCharacter(int index) {
      return result.GetCharacter(index);
    }
    public Builder SetCharacter(int index, global::CharacterData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.character_[index] = value;
      return this;
    }
    public Builder SetCharacter(int index, global::CharacterData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.character_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddCharacter(global::CharacterData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.character_.Add(value);
      return this;
    }
    public Builder AddCharacter(global::CharacterData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.character_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeCharacter(scg::IEnumerable<global::CharacterData> values) {
      PrepareBuilder();
      result.character_.Add(values);
      return this;
    }
    public Builder ClearCharacter() {
      PrepareBuilder();
      result.character_.Clear();
      return this;
    }
  }
  static CharacterConfig() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class BufferData : pb::GeneratedMessage<BufferData, BufferData.Builder> {
  private BufferData() { }
  private static readonly BufferData defaultInstance = new BufferData().MakeReadOnly();
  private static readonly string[] _bufferDataFieldNames = new string[] { "id", "time_length", "type", "value" };
  private static readonly uint[] _bufferDataFieldTags = new uint[] { 8, 32, 16, 24 };
  public static BufferData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override BufferData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override BufferData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_BufferData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<BufferData, BufferData.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_BufferData__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private int id_;
  public bool HasId {
    get { return hasId; }
  }
  public int Id {
    get { return id_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int ValueFieldNumber = 3;
  private bool hasValue;
  private int value_;
  public bool HasValue {
    get { return hasValue; }
  }
  public int Value {
    get { return value_; }
  }
  
  public const int TimeLengthFieldNumber = 4;
  private bool hasTimeLength;
  private int timeLength_;
  public bool HasTimeLength {
    get { return hasTimeLength; }
  }
  public int TimeLength {
    get { return timeLength_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasId) return false;
      if (!hasType) return false;
      if (!hasValue) return false;
      if (!hasTimeLength) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _bufferDataFieldNames;
    if (hasId) {
      output.WriteSInt32(1, field_names[0], Id);
    }
    if (hasType) {
      output.WriteSInt32(2, field_names[2], Type);
    }
    if (hasValue) {
      output.WriteSInt32(3, field_names[3], Value);
    }
    if (hasTimeLength) {
      output.WriteSInt32(4, field_names[1], TimeLength);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeSInt32Size(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeSInt32Size(2, Type);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeSInt32Size(3, Value);
      }
      if (hasTimeLength) {
        size += pb::CodedOutputStream.ComputeSInt32Size(4, TimeLength);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static BufferData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static BufferData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static BufferData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static BufferData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static BufferData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static BufferData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static BufferData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static BufferData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static BufferData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static BufferData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private BufferData MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(BufferData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<BufferData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(BufferData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private BufferData result;
    
    private BufferData PrepareBuilder() {
      if (resultIsReadOnly) {
        BufferData original = result;
        result = new BufferData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override BufferData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::BufferData.Descriptor; }
    }
    
    public override BufferData DefaultInstanceForType {
      get { return global::BufferData.DefaultInstance; }
    }
    
    public override BufferData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is BufferData) {
        return MergeFrom((BufferData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(BufferData other) {
      if (other == global::BufferData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasTimeLength) {
        TimeLength = other.TimeLength;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_bufferDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _bufferDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadSInt32(ref result.id_);
            break;
          }
          case 16: {
            result.hasType = input.ReadSInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasValue = input.ReadSInt32(ref result.value_);
            break;
          }
          case 32: {
            result.hasTimeLength = input.ReadSInt32(ref result.timeLength_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public int Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(int value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasValue {
      get { return result.hasValue; }
    }
    public int Value {
      get { return result.Value; }
      set { SetValue(value); }
    }
    public Builder SetValue(int value) {
      PrepareBuilder();
      result.hasValue = true;
      result.value_ = value;
      return this;
    }
    public Builder ClearValue() {
      PrepareBuilder();
      result.hasValue = false;
      result.value_ = 0;
      return this;
    }
    
    public bool HasTimeLength {
      get { return result.hasTimeLength; }
    }
    public int TimeLength {
      get { return result.TimeLength; }
      set { SetTimeLength(value); }
    }
    public Builder SetTimeLength(int value) {
      PrepareBuilder();
      result.hasTimeLength = true;
      result.timeLength_ = value;
      return this;
    }
    public Builder ClearTimeLength() {
      PrepareBuilder();
      result.hasTimeLength = false;
      result.timeLength_ = 0;
      return this;
    }
  }
  static BufferData() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class BufferConfig : pb::GeneratedMessage<BufferConfig, BufferConfig.Builder> {
  private BufferConfig() { }
  private static readonly BufferConfig defaultInstance = new BufferConfig().MakeReadOnly();
  private static readonly string[] _bufferConfigFieldNames = new string[] { "buffer" };
  private static readonly uint[] _bufferConfigFieldTags = new uint[] { 10 };
  public static BufferConfig DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override BufferConfig DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override BufferConfig ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Configdata.internal__static_BufferConfig__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<BufferConfig, BufferConfig.Builder> InternalFieldAccessors {
    get { return global::Configdata.internal__static_BufferConfig__FieldAccessorTable; }
  }
  
  public const int BufferFieldNumber = 1;
  private pbc::PopsicleList<global::BufferData> buffer_ = new pbc::PopsicleList<global::BufferData>();
  public scg::IList<global::BufferData> BufferList {
    get { return buffer_; }
  }
  public int BufferCount {
    get { return buffer_.Count; }
  }
  public global::BufferData GetBuffer(int index) {
    return buffer_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::BufferData element in BufferList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _bufferConfigFieldNames;
    if (buffer_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], buffer_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::BufferData element in BufferList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static BufferConfig ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static BufferConfig ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static BufferConfig ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static BufferConfig ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static BufferConfig ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static BufferConfig ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static BufferConfig ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static BufferConfig ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static BufferConfig ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static BufferConfig ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private BufferConfig MakeReadOnly() {
    buffer_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(BufferConfig prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<BufferConfig, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(BufferConfig cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private BufferConfig result;
    
    private BufferConfig PrepareBuilder() {
      if (resultIsReadOnly) {
        BufferConfig original = result;
        result = new BufferConfig();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override BufferConfig MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::BufferConfig.Descriptor; }
    }
    
    public override BufferConfig DefaultInstanceForType {
      get { return global::BufferConfig.DefaultInstance; }
    }
    
    public override BufferConfig BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is BufferConfig) {
        return MergeFrom((BufferConfig) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(BufferConfig other) {
      if (other == global::BufferConfig.DefaultInstance) return this;
      PrepareBuilder();
      if (other.buffer_.Count != 0) {
        result.buffer_.Add(other.buffer_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_bufferConfigFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _bufferConfigFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.buffer_, global::BufferData.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::BufferData> BufferList {
      get { return PrepareBuilder().buffer_; }
    }
    public int BufferCount {
      get { return result.BufferCount; }
    }
    public global::BufferData GetBuffer(int index) {
      return result.GetBuffer(index);
    }
    public Builder SetBuffer(int index, global::BufferData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.buffer_[index] = value;
      return this;
    }
    public Builder SetBuffer(int index, global::BufferData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.buffer_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddBuffer(global::BufferData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.buffer_.Add(value);
      return this;
    }
    public Builder AddBuffer(global::BufferData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.buffer_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeBuffer(scg::IEnumerable<global::BufferData> values) {
      PrepareBuilder();
      result.buffer_.Add(values);
      return this;
    }
    public Builder ClearBuffer() {
      PrepareBuilder();
      result.buffer_.Clear();
      return this;
    }
  }
  static BufferConfig() {
    object.ReferenceEquals(global::Configdata.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
